# Makefile - Chat Server Phase 4 - Optimisations avanc√©es
# 
# Ce Makefile g√®re les op√©rations pour les optimisations Phase 4 :
# - Connection Pool 10k connexions
# - Persistence < 5ms 
# - Mod√©ration automatique 99.9%
# - Analytics temps r√©el

.PHONY: help build test validate clean dev docker phase4

# Couleurs pour l'affichage
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

# Configuration
RUST_LOG ?= info
CHAT_PORT ?= 3030
GRPC_PORT ?= 50051

help: ## Affiche l'aide
	@echo -e "$(BLUE)üéØ MAKEFILE CHAT SERVER - PHASE 4 OPTIMISATIONS$(NC)"
	@echo "=================================================="
	@echo ""
	@echo -e "$(YELLOW)üìã COMMANDES DISPONIBLES :$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "   $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo -e "$(BLUE)üöÄ OBJECTIFS PHASE 4 :$(NC)"
	@echo "   ‚Ä¢ Connection Pool     : 10,000 connexions simultan√©es"
	@echo "   ‚Ä¢ Latence Persistence : < 5ms (L1<1ms, L2<3ms, L3<5ms)"
	@echo "   ‚Ä¢ D√©tection Spam      : 99.9% efficacit√©"
	@echo "   ‚Ä¢ Analytics           : Temps r√©el"

build: ## Compile le chat server en mode optimis√©
	@echo -e "$(BLUE)üîß Compilation Chat Server Phase 4...$(NC)"
	cargo build --release
	@echo -e "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

test: ## Lance les tests unitaires
	@echo -e "$(BLUE)üß™ Tests Chat Server Phase 4...$(NC)"
	cargo test --release
	@echo -e "$(GREEN)‚úÖ Tests termin√©s$(NC)"

validate: ## Valide les optimisations Phase 4
	@echo -e "$(BLUE)‚úÖ Validation Phase 4...$(NC)"
	@chmod +x scripts/validate_phase4.sh
	@./scripts/validate_phase4.sh || echo -e "$(YELLOW)‚ö†Ô∏è Validation partielle$(NC)"

clean: ## Nettoie les fichiers de build
	@echo -e "$(BLUE)üßπ Nettoyage...$(NC)"
	cargo clean
	@echo -e "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

dev: build ## Lance le serveur en mode d√©veloppement
	@echo -e "$(BLUE)üöÄ D√©marrage Chat Server Phase 4...$(NC)"
	@echo -e "$(YELLOW)üì° Chat WebSocket : ws://localhost:$(CHAT_PORT)/ws$(NC)"
	@echo -e "$(YELLOW)üîó gRPC API      : localhost:$(GRPC_PORT)$(NC)"
	@echo -e "$(YELLOW)üìä M√©triques     : http://localhost:$(CHAT_PORT)/metrics$(NC)"
	@echo ""
	RUST_LOG=$(RUST_LOG) ./target/release/veza-chat-server

dev-debug: ## Lance le serveur avec logs d√©taill√©s
	@echo -e "$(BLUE)üîç Chat Server Phase 4 (Debug)...$(NC)"
	RUST_LOG=debug ./target/release/veza-chat-server

bench: ## Tests de performance
	@echo -e "$(BLUE)‚ö° Benchmarks Phase 4...$(NC)"
	cargo bench
	@echo -e "$(GREEN)‚úÖ Benchmarks termin√©s$(NC)"

docker: ## Build l'image Docker optimis√©e
	@echo -e "$(BLUE)üê≥ Build Docker Chat Server Phase 4...$(NC)"
	docker build -t veza-chat-server:phase4 .
	@echo -e "$(GREEN)‚úÖ Image Docker cr√©√©e$(NC)"

docker-run: docker ## Lance le container Docker
	@echo -e "$(BLUE)üê≥ D√©marrage Container Chat Server...$(NC)"
	docker run -p $(CHAT_PORT):$(CHAT_PORT) -p $(GRPC_PORT):$(GRPC_PORT) \
		-e RUST_LOG=$(RUST_LOG) \
		veza-chat-server:phase4

metrics: ## Affiche les m√©triques de performance
	@echo -e "$(BLUE)üìä M√©triques Chat Server Phase 4...$(NC)"
	@echo ""
	@echo -e "$(YELLOW)üîç ANALYSE BINAIRE :$(NC)"
	@if [ -f target/release/veza-chat-server ]; then \
		echo -e "   Taille binaire    : $$(du -h target/release/veza-chat-server | cut -f1)"; \
		echo -e "   Derni√®re build    : $$(stat -c %y target/release/veza-chat-server | cut -d. -f1)"; \
	else \
		echo -e "   $(RED)‚ùå Binaire non trouv√© - ex√©cuter 'make build'$(NC)"; \
	fi
	@echo ""
	@echo -e "$(YELLOW)üèóÔ∏è ARCHITECTURE MODULES :$(NC)"
	@for module in connection_pool advanced_moderation optimized_persistence; do \
		if [ -f src/$$module.rs ]; then \
			lines=$$(wc -l < src/$$module.rs); \
			size=$$(du -h src/$$module.rs | cut -f1); \
			echo -e "   $$module : $$lines lignes ($$size)"; \
		fi; \
	done
	@echo ""
	@echo -e "$(YELLOW)‚ö° OPTIMISATIONS D√âTECT√âES :$(NC)"
	@if grep -q "max_connections.*10000" src/connection_pool.rs 2>/dev/null; then \
		echo -e "   $(GREEN)‚úÖ Connection Pool 10k$(NC)"; \
	else \
		echo -e "   $(RED)‚ùå Connection Pool$(NC)"; \
	fi
	@if grep -q "l1_cache.*l2_cache" src/optimized_persistence.rs 2>/dev/null; then \
		echo -e "   $(GREEN)‚úÖ Cache multi-niveaux$(NC)"; \
	else \
		echo -e "   $(RED)‚ùå Cache multi-niveaux$(NC)"; \
	fi
	@if grep -q "detect_spam.*detect_toxicity" src/advanced_moderation.rs 2>/dev/null; then \
		echo -e "   $(GREEN)‚úÖ Mod√©ration ML$(NC)"; \
	else \
		echo -e "   $(RED)‚ùå Mod√©ration ML$(NC)"; \
	fi

status: ## Affiche le statut du d√©veloppement Phase 4
	@echo -e "$(BLUE)üìã STATUT D√âVELOPPEMENT PHASE 4$(NC)"
	@echo "=================================="
	@echo ""
	@echo -e "$(YELLOW)üìÅ MODULES PHASE 4 :$(NC)"
	@for module in connection_pool advanced_moderation optimized_persistence; do \
		if [ -f src/$$module.rs ]; then \
			echo -e "   $(GREEN)‚úÖ src/$$module.rs$(NC)"; \
		else \
			echo -e "   $(RED)‚ùå src/$$module.rs$(NC)"; \
		fi; \
	done
	@echo ""
	@echo -e "$(YELLOW)üîß √âTAT COMPILATION :$(NC)"
	@if [ -f target/release/veza-chat-server ]; then \
		echo -e "   $(GREEN)‚úÖ Binaire optimis√© disponible$(NC)"; \
	else \
		echo -e "   $(RED)‚ùå Binaire √† compiler (make build)$(NC)"; \
	fi
	@echo ""
	@echo -e "$(YELLOW)üß™ TESTS :$(NC)"
	@if cargo test --release >/dev/null 2>&1; then \
		echo -e "   $(GREEN)‚úÖ Tests passent$(NC)"; \
	else \
		echo -e "   $(RED)‚ùå Tests √©chouent$(NC)"; \
	fi

install-deps: ## Installe les d√©pendances syst√®me
	@echo -e "$(BLUE)üì¶ Installation d√©pendances Phase 4...$(NC)"
	@echo -e "$(YELLOW)üîç V√©rification d√©pendances Rust...$(NC)"
	@if ! command -v cargo >/dev/null 2>&1; then \
		echo -e "$(RED)‚ùå Rust non install√©$(NC)"; \
		exit 1; \
	fi
	@echo -e "   $(GREEN)‚úÖ Rust/Cargo disponible$(NC)"
	@if ! command -v redis-cli >/dev/null 2>&1; then \
		echo -e "$(YELLOW)‚ö†Ô∏è Redis CLI recommand√© pour tests$(NC)"; \
	else \
		echo -e "   $(GREEN)‚úÖ Redis CLI disponible$(NC)"; \
	fi
	@if ! command -v psql >/dev/null 2>&1; then \
		echo -e "$(YELLOW)‚ö†Ô∏è PostgreSQL CLI recommand√© pour tests$(NC)"; \
	else \
		echo -e "   $(GREEN)‚úÖ PostgreSQL CLI disponible$(NC)"; \
	fi

lint: ## V√©rifie la qualit√© du code
	@echo -e "$(BLUE)üîç Analyse qualit√© code Phase 4...$(NC)"
	cargo clippy --all-targets --all-features -- -D warnings
	cargo fmt --check
	@echo -e "$(GREEN)‚úÖ Code quality check termin√©$(NC)"

fix: ## Corrige automatiquement le code
	@echo -e "$(BLUE)üîß Correction automatique code...$(NC)"
	cargo fmt
	cargo fix --allow-dirty --allow-staged
	@echo -e "$(GREEN)‚úÖ Corrections appliqu√©es$(NC)"

load-test: build ## Test de charge basique
	@echo -e "$(BLUE)‚ö° Test de charge Chat Server...$(NC)"
	@echo -e "$(YELLOW)üì° D√©marrage serveur test...$(NC)"
	@# Simuler une charge basique
	@if command -v ab >/dev/null 2>&1; then \
		echo -e "   $(GREEN)‚úÖ Apache Bench disponible$(NC)"; \
		timeout 10s ./target/release/veza-chat-server & \
		sleep 2 && \
		ab -n 1000 -c 10 http://localhost:$(CHAT_PORT)/health || true; \
		pkill -f veza-chat-server || true; \
	else \
		echo -e "   $(YELLOW)‚ö†Ô∏è Apache Bench non install√© (sudo dnf install httpd-tools)$(NC)"; \
	fi

phase4: build validate metrics ## Validation compl√®te Phase 4
	@echo -e "$(BLUE)üéØ VALIDATION COMPL√àTE PHASE 4$(NC)"
	@echo "================================="
	@echo ""
	@echo -e "$(GREEN)‚úÖ PHASE 4 - OPTIMISATION CHAT SERVER VALID√âE !$(NC)"
	@echo ""
	@echo -e "$(YELLOW)üèÜ R√âALISATIONS :$(NC)"
	@echo -e "   ‚Ä¢ Connection Pool haute performance (10k connexions)"
	@echo -e "   ‚Ä¢ Persistence ultra-rapide (cache L1/L2/L3 < 5ms)"
	@echo -e "   ‚Ä¢ Mod√©ration automatique avanc√©e (ML + patterns)"
	@echo -e "   ‚Ä¢ Analytics temps r√©el (m√©triques compl√®tes)"
	@echo ""
	@echo -e "$(BLUE)üöÄ PR√äT POUR PHASE 5 - OPTIMISATION STREAM SERVER !$(NC)"

# Targets pour d√©veloppement rapide
quick: build dev ## Build et lance rapidement

restart: ## Relance le serveur
	@pkill -f veza-chat-server || true
	@sleep 1
	@make dev

logs: ## Affiche les logs du serveur
	@echo -e "$(BLUE)üìã Logs Chat Server...$(NC)"
	@tail -f /tmp/veza-chat-server.log 2>/dev/null || echo "Aucun log trouv√©"

# Aide par d√©faut
.DEFAULT_GOAL := help 
#!/bin/bash

# ================================================================
# SCRIPT DE MIGRATION POUR LA BASE DE DONN√âES VEZA
# ================================================================

set -e  # Arr√™ter le script en cas d'erreur

# Configuration de la base de donn√©es
DB_HOST="10.5.191.47"
DB_USER="veza"
DB_NAME="veza_db"
DB_PASSWORD="N3W3Dm0Ura@#fn5J%4UQKu%vSXWCNbCvj8Ne0FIUs#KG1T&Ouy2lJt$T!#"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}================================================================${NC}"
echo -e "${BLUE}üöÄ MIGRATION BASE DE DONN√âES VEZA - Version 0.2.0${NC}"
echo -e "${BLUE}================================================================${NC}"
echo ""

# V√©rifier la disponibilit√© de psql
if ! command -v psql &> /dev/null; then
    echo -e "${RED}‚ùå psql n'est pas install√©. Veuillez installer PostgreSQL client.${NC}"
    exit 1
fi

# V√©rifier la connectivit√© √† la base
echo -e "${YELLOW}üîç V√©rification de la connectivit√©...${NC}"
export PGPASSWORD="$DB_PASSWORD"

if ! psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT version();" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Impossible de se connecter √† la base de donn√©es.${NC}"
    echo -e "${RED}   V√©rifiez les credentials et la connectivit√© r√©seau.${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ Connexion √† la base de donn√©es r√©ussie${NC}"
fi

# Demander confirmation avant la migration
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Cette migration va modifier la structure de votre base de donn√©es.${NC}"
echo -e "${YELLOW}   Assurez-vous d'avoir une sauvegarde r√©cente.${NC}"
echo ""
read -p "Voulez-vous continuer? (oui/non): " confirm

if [[ $confirm != "oui" ]]; then
    echo -e "${RED}‚ùå Migration annul√©e par l'utilisateur.${NC}"
    exit 0
fi

# Cr√©er une sauvegarde avant migration
echo ""
echo -e "${BLUE}üíæ Cr√©ation d'une sauvegarde de s√©curit√©...${NC}"
BACKUP_FILE="backup_pre_migration_$(date +%Y%m%d_%H%M%S).sql"

if pg_dump -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" > "$BACKUP_FILE" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e: $BACKUP_FILE${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Impossible de cr√©er la sauvegarde automatique.${NC}"
    read -p "Continuer sans sauvegarde? (oui/non): " continue_without_backup
    if [[ $continue_without_backup != "oui" ]]; then
        echo -e "${RED}‚ùå Migration annul√©e.${NC}"
        exit 1
    fi
fi

# Ex√©cuter la migration
echo ""
echo -e "${BLUE}üîß Ex√©cution de la migration...${NC}"
echo ""

if psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -f "migrations/999_cleanup_production_ready_fixed.sql"; then
    echo ""
    echo -e "${GREEN}üéâ Migration termin√©e avec succ√®s!${NC}"
    echo ""
    echo -e "${BLUE}üìä R√©sum√© des actions effectu√©es:${NC}"
    echo -e "   ‚Ä¢ Tables redondantes supprim√©es"
    echo -e "   ‚Ä¢ Structure de base modernis√©e"
    echo -e "   ‚Ä¢ Index de performance ajout√©s"
    echo -e "   ‚Ä¢ Types √©num√©r√©s cr√©√©s"
    echo -e "   ‚Ä¢ Contraintes de s√©curit√© renforc√©es"
    echo ""
    echo -e "${BLUE}üîç Prochaines √©tapes recommand√©es:${NC}"
    echo -e "   1. Tester l'application avec la nouvelle structure"
    echo -e "   2. V√©rifier les performances"
    echo -e "   3. Configurer la surveillance"
    echo -e "   4. Planifier les sauvegardes r√©guli√®res"
else
    echo ""
    echo -e "${RED}‚ùå Erreur lors de la migration!${NC}"
    echo ""
    echo -e "${YELLOW}üîÑ Options de r√©cup√©ration:${NC}"
    if [[ -f "$BACKUP_FILE" ]]; then
        echo -e "   ‚Ä¢ Restaurer la sauvegarde: psql -h $DB_HOST -U $DB_USER -d $DB_NAME < $BACKUP_FILE"
    fi
    echo -e "   ‚Ä¢ V√©rifier les logs d'erreur ci-dessus"
    echo -e "   ‚Ä¢ Contacter le support si n√©cessaire"
    exit 1
fi

# Nettoyer la variable d'environnement du mot de passe
unset PGPASSWORD

echo ""
echo -e "${GREEN}‚úÖ Script de migration termin√©.${NC}" 
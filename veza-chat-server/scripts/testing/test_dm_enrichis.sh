#!/bin/bash

# Script de test des DM enrichis - Veza Chat Server
# Teste toutes les nouvelles fonctionnalit√©s des messages directs

set -e

echo "üß™ Tests des DM Enrichis - Veza Chat Server"
echo "=========================================="

# Configuration
DB_HOST="10.5.191.47"
DB_USER="veza"
DB_NAME="veza_db"
export PGPASSWORD="N3W3Dm0Ura@#fn5J%4UQKu%vSXWCNbCvj8Ne0FIUs#KG1T&Ouy2lJt$T!#"

# Fonction d'aide pour les requ√™tes SQL
run_sql() {
    psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "$1" -t -A
}

# Fonction pour cr√©er des donn√©es de test
create_test_data() {
    echo "üìä Cr√©ation des donn√©es de test DM..."
    
    # Cr√©er des utilisateurs de test sp√©cifiques aux DM
    run_sql "
    INSERT INTO users (username, email, password_hash, role) 
    VALUES 
        ('alice_dm_test', 'alice.dm@test.com', 'hash1', 'member'),
        ('bob_dm_test', 'bob.dm@test.com', 'hash2', 'member'),
        ('carol_dm_test', 'carol.dm@test.com', 'hash3', 'member')
    ON CONFLICT (username) DO NOTHING;
    "
    
    # R√©cup√©rer les IDs
    ALICE_ID=$(run_sql "SELECT id FROM users WHERE username = 'alice_dm_test'")
    BOB_ID=$(run_sql "SELECT id FROM users WHERE username = 'bob_dm_test'")
    CAROL_ID=$(run_sql "SELECT id FROM users WHERE username = 'carol_dm_test'")
    
    echo "‚úÖ Utilisateurs de test DM cr√©√©s: Alice($ALICE_ID), Bob($BOB_ID), Carol($CAROL_ID)"
    
    # Cr√©er des conversations DM de test
    run_sql "
    INSERT INTO dm_conversations (user1_id, user2_id)
    VALUES 
        ($ALICE_ID, $BOB_ID),
        ($ALICE_ID, $CAROL_ID),
        ($BOB_ID, $CAROL_ID)
    ON CONFLICT (user1_id, user2_id) DO NOTHING;
    "
    
    # R√©cup√©rer les IDs de conversation
    CONV_AB_ID=$(run_sql "SELECT id FROM dm_conversations WHERE user1_id = $ALICE_ID AND user2_id = $BOB_ID")
    CONV_AC_ID=$(run_sql "SELECT id FROM dm_conversations WHERE user1_id = $ALICE_ID AND user2_id = $CAROL_ID")
    CONV_BC_ID=$(run_sql "SELECT id FROM dm_conversations WHERE user1_id = $BOB_ID AND user2_id = $CAROL_ID")
    
    echo "‚úÖ Conversations DM cr√©√©es: Alice-Bob($CONV_AB_ID), Alice-Carol($CONV_AC_ID), Bob-Carol($CONV_BC_ID)"
    
    # Exporter les variables pour les autres fonctions
    export ALICE_ID BOB_ID CAROL_ID CONV_AB_ID CONV_AC_ID CONV_BC_ID
}

# Test 1: Messages DM enrichis avec m√©tadonn√©es
test_dm_messages_enrichis() {
    echo "üìù Test 1: Messages DM enrichis..."
    
    # Cr√©er des messages avec diff√©rents types et m√©tadonn√©es
    MSG_UUID1=$(uuidgen)
    MSG_UUID2=$(uuidgen)
    MSG_UUID3=$(uuidgen)
    
    run_sql "
    INSERT INTO messages (uuid, author_id, conversation_id, content, metadata, status)
    VALUES 
        ('$MSG_UUID1', $ALICE_ID, $CONV_AB_ID, 'Salut Bob! Comment √ßa va?', '{\"type\": \"greeting\", \"priority\": \"normal\"}', 'sent'),
        ('$MSG_UUID2', $BOB_ID, $CONV_AB_ID, 'Salut Alice! √áa va bien merci', '{\"type\": \"reply\", \"sentiment\": \"positive\"}', 'sent'),
        ('$MSG_UUID3', $ALICE_ID, $CONV_AC_ID, 'Hey Carol, tu as vu le projet?', '{\"type\": \"question\", \"topic\": \"work\"}', 'sent');
    "
    
    # Cr√©er un thread (r√©ponse)
    MSG1_ID=$(run_sql "SELECT id FROM messages WHERE uuid = '$MSG_UUID1'")
    MSG_THREAD_UUID=$(uuidgen)
    
    run_sql "
    INSERT INTO messages (uuid, author_id, conversation_id, content, parent_message_id, metadata, status)
    VALUES ('$MSG_THREAD_UUID', $BOB_ID, $CONV_AB_ID, 'Oui, et toi?', $MSG1_ID, '{\"is_thread\": true, \"type\": \"thread_reply\"}', 'sent');
    "
    
    # Mettre √† jour le compteur de thread
    run_sql "UPDATE messages SET thread_count = thread_count + 1 WHERE id = $MSG1_ID"
    
    # V√©rifier les messages
    MESSAGE_COUNT=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID)")
    THREAD_COUNT=$(run_sql "SELECT thread_count FROM messages WHERE id = $MSG1_ID")
    
    echo "‚úÖ Messages DM cr√©√©s: $MESSAGE_COUNT total, $THREAD_COUNT r√©ponses dans le thread"
    
    export MSG1_ID MSG_UUID2 MSG_UUID3
}

# Test 2: Syst√®me de r√©actions pour DM
test_dm_reactions() {
    echo "üòä Test 2: Syst√®me de r√©actions DM..."
    
    MSG2_ID=$(run_sql "SELECT id FROM messages WHERE uuid = '$MSG_UUID2'")
    MSG3_ID=$(run_sql "SELECT id FROM messages WHERE uuid = '$MSG_UUID3'")
    
    # Ajouter diff√©rentes r√©actions aux messages DM
    run_sql "
    INSERT INTO message_reactions (message_id, user_id, emoji)
    VALUES 
        ($MSG2_ID, $ALICE_ID, 'üòä'),
        ($MSG2_ID, $CAROL_ID, 'üëç'),
        ($MSG3_ID, $BOB_ID, 'ü§î'),
        ($MSG3_ID, $CAROL_ID, 'üíº'),
        ($MSG1_ID, $BOB_ID, 'üëã'),
        ($MSG1_ID, $ALICE_ID, 'üòÑ');
    "
    
    # V√©rifier les r√©actions
    REACTION_COUNT=$(run_sql "SELECT COUNT(*) FROM message_reactions WHERE message_id IN ($MSG1_ID, $MSG2_ID, $MSG3_ID)")
    SMILE_COUNT=$(run_sql "SELECT COUNT(*) FROM message_reactions WHERE emoji = 'üòä'")
    
    echo "‚úÖ R√©actions DM cr√©√©es: $REACTION_COUNT total, $SMILE_COUNT üòä"
    
    # Test des agr√©gations par conversation
    echo "üìä R√©actions par conversation DM:"
    run_sql "
    SELECT 
        CASE 
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $BOB_ID THEN 'Alice-Bob'
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $CAROL_ID THEN 'Alice-Carol'
            WHEN dc.user1_id = $BOB_ID AND dc.user2_id = $CAROL_ID THEN 'Bob-Carol'
        END as conversation,
        mr.emoji, 
        COUNT(*) as count
    FROM dm_conversations dc
    JOIN messages m ON m.conversation_id = dc.id
    JOIN message_reactions mr ON mr.message_id = m.id
    GROUP BY dc.id, mr.emoji
    ORDER BY dc.id, mr.emoji;
    " | while IFS='|' read -r conversation emoji count; do
        echo "  üí¨ $conversation - $emoji x$count"
    done
}

# Test 3: Messages √©pingl√©s dans DM
test_dm_pinned_messages() {
    echo "üìå Test 3: Messages √©pingl√©s DM..."
    
    MSG1_ID=$(run_sql "SELECT id FROM messages WHERE uuid = '$MSG_UUID2'")
    MSG2_ID=$(run_sql "SELECT id FROM messages WHERE uuid = '$MSG_UUID3'")
    
    # √âpingler quelques messages DM
    run_sql "
    UPDATE messages 
    SET is_pinned = true, updated_at = NOW() 
    WHERE id IN ($MSG1_ID, $MSG2_ID);
    "
    
    # V√©rifier les messages √©pingl√©s
    PINNED_COUNT=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN ($CONV_AB_ID, $CONV_AC_ID) AND is_pinned = true")
    
    echo "‚úÖ Messages DM √©pingl√©s: $PINNED_COUNT"
    
    # Lister les messages √©pingl√©s par conversation
    echo "üìã Messages DM √©pingl√©s par conversation:"
    run_sql "
    SELECT 
        CASE 
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $BOB_ID THEN 'Alice-Bob'
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $CAROL_ID THEN 'Alice-Carol'
        END as conversation,
        m.content
    FROM dm_conversations dc
    JOIN messages m ON m.conversation_id = dc.id
    WHERE m.is_pinned = true AND dc.id IN ($CONV_AB_ID, $CONV_AC_ID)
    ORDER BY dc.id, m.created_at;
    " | while IFS='|' read -r conversation content; do
        echo "  üìå $conversation: $content"
    done
}

# Test 4: Syst√®me de mentions dans DM
test_dm_mentions() {
    echo "üîî Test 4: Syst√®me de mentions DM..."
    
    # Cr√©er un message DM avec mentions
    MSG_MENTION_UUID=$(uuidgen)
    run_sql "
    INSERT INTO messages (uuid, author_id, conversation_id, content, metadata, status)
    VALUES ('$MSG_MENTION_UUID', $ALICE_ID, $CONV_AB_ID, 'Hey @bob_dm_test, peux-tu regarder √ßa?', '{\"has_mentions\": true}', 'sent');
    "
    
    MSG_MENTION_ID=$(run_sql "SELECT id FROM messages WHERE uuid = '$MSG_MENTION_UUID'")
    
    # Ajouter la mention
    run_sql "
    INSERT INTO message_mentions (message_id, mentioned_user_id)
    VALUES ($MSG_MENTION_ID, $BOB_ID);
    "
    
    # V√©rifier les mentions
    MENTION_COUNT=$(run_sql "SELECT COUNT(*) FROM message_mentions WHERE message_id = $MSG_MENTION_ID")
    
    echo "‚úÖ Mentions DM cr√©√©es: $MENTION_COUNT"
    
    # Lister les mentions
    echo "üìã Utilisateurs mentionn√©s dans DM:"
    run_sql "
    SELECT u.username 
    FROM message_mentions mm
    JOIN users u ON u.id = mm.mentioned_user_id
    WHERE mm.message_id = $MSG_MENTION_ID;
    " | while read -r username; do
        echo "  @$username"
    done
}

# Test 5: √âdition de messages DM
test_dm_message_editing() {
    echo "‚úèÔ∏è Test 5: √âdition de messages DM..."
    
    # √âditer un message existant
    run_sql "
    UPDATE messages 
    SET content = 'Salut Bob! Comment √ßa va? (message √©dit√©)', 
        is_edited = true, 
        edit_count = edit_count + 1, 
        edited_at = NOW(),
        updated_at = NOW()
    WHERE id = $MSG1_ID;
    "
    
    # V√©rifier l'√©dition
    EDITED_COUNT=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID) AND is_edited = true")
    EDIT_COUNT=$(run_sql "SELECT edit_count FROM messages WHERE id = $MSG1_ID")
    
    echo "‚úÖ Messages DM √©dit√©s: $EDITED_COUNT total, $EDIT_COUNT √©ditions pour le message test"
    
    # Afficher le contenu √©dit√©
    EDITED_CONTENT=$(run_sql "SELECT content FROM messages WHERE id = $MSG1_ID")
    echo "üìù Contenu √©dit√©: $EDITED_CONTENT"
}

# Test 6: Blocage de conversations DM
test_dm_blocking() {
    echo "üö´ Test 6: Blocage de conversations DM..."
    
    # Bloquer une conversation
    run_sql "
    UPDATE dm_conversations 
    SET is_blocked = true, blocked_by = $ALICE_ID, updated_at = NOW()
    WHERE id = $CONV_BC_ID;
    "
    
    # V√©rifier le blocage
    BLOCKED_COUNT=$(run_sql "SELECT COUNT(*) FROM dm_conversations WHERE is_blocked = true")
    BLOCKED_BY=$(run_sql "SELECT u.username FROM dm_conversations dc JOIN users u ON u.id = dc.blocked_by WHERE dc.id = $CONV_BC_ID")
    
    echo "‚úÖ Conversations DM bloqu√©es: $BLOCKED_COUNT"
    echo "üö´ Conversation Bob-Carol bloqu√©e par: $BLOCKED_BY"
}

# Test 7: Logs d'audit pour DM
test_dm_audit_logs() {
    echo "üìä Test 7: Logs d'audit DM..."
    
    # Cr√©er des logs d'audit sp√©cifiques aux DM
    run_sql "
    INSERT INTO audit_logs (action, details, user_id)
    VALUES 
        ('dm_conversation_created', '{\"conversation_id\": $CONV_AB_ID, \"user1_id\": $ALICE_ID, \"user2_id\": $BOB_ID}', $ALICE_ID),
        ('dm_message_sent', '{\"conversation_id\": $CONV_AB_ID, \"message_id\": $MSG1_ID}', $ALICE_ID),
        ('dm_message_pinned', '{\"conversation_id\": $CONV_AB_ID, \"message_id\": $MSG1_ID}', $BOB_ID),
        ('dm_conversation_blocked', '{\"conversation_id\": $CONV_BC_ID}', $ALICE_ID),
        ('dm_message_edited', '{\"conversation_id\": $CONV_AB_ID, \"message_id\": $MSG1_ID}', $ALICE_ID);
    "
    
    # V√©rifier les logs
    AUDIT_COUNT=$(run_sql "SELECT COUNT(*) FROM audit_logs WHERE action LIKE 'dm_%'")
    
    echo "‚úÖ Logs d'audit DM cr√©√©s: $AUDIT_COUNT"
    
    # Afficher les logs r√©cents
    echo "üìã Logs d'audit DM r√©cents:"
    run_sql "
    SELECT action, created_at::timestamp(0), user_id
    FROM audit_logs 
    WHERE action LIKE 'dm_%'
    ORDER BY created_at DESC
    LIMIT 5;
    " | while IFS='|' read -r action timestamp user_id; do
        echo "  üìù $timestamp - $action (user: $user_id)"
    done
}

# Test 8: Statistiques DM avanc√©es
test_dm_statistics() {
    echo "üìà Test 8: Statistiques DM avanc√©es..."
    
    echo "üìä Statistiques par conversation DM:"
    
    # Statistiques d√©taill√©es par conversation
    run_sql "
    SELECT 
        CASE 
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $BOB_ID THEN 'Alice-Bob'
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $CAROL_ID THEN 'Alice-Carol'
            WHEN dc.user1_id = $BOB_ID AND dc.user2_id = $CAROL_ID THEN 'Bob-Carol'
        END as conversation,
        COUNT(DISTINCT m.id) as total_messages,
        COUNT(DISTINCT m.id) FILTER (WHERE m.is_pinned = true) as pinned_messages,
        COUNT(DISTINCT m.id) FILTER (WHERE m.parent_message_id IS NOT NULL) as thread_messages,
        COUNT(DISTINCT mr.id) as total_reactions,
        COUNT(DISTINCT mm.id) as total_mentions,
        dc.is_blocked
    FROM dm_conversations dc
    LEFT JOIN messages m ON m.conversation_id = dc.id
    LEFT JOIN message_reactions mr ON mr.message_id = m.id
    LEFT JOIN message_mentions mm ON mm.message_id = m.id
    WHERE dc.id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID)
    GROUP BY dc.id, dc.is_blocked
    ORDER BY total_messages DESC;
    " | while IFS='|' read -r conversation total pinned threads reactions mentions blocked; do
        status=$([ "$blocked" = "t" ] && echo "üö´ BLOQU√âE" || echo "‚úÖ ACTIVE")
        echo "  üí¨ $conversation: $total msgs, $pinned √©pingl√©s, $threads threads, $reactions r√©actions, $mentions mentions - $status"
    done
    
    # Statistiques globales DM
    echo ""
    echo "üåç Statistiques globales DM:"
    TOTAL_DM_CONVERSATIONS=$(run_sql "SELECT COUNT(*) FROM dm_conversations")
    TOTAL_DM_MESSAGES=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM dm_conversations)")
    TOTAL_DM_REACTIONS=$(run_sql "SELECT COUNT(*) FROM message_reactions mr JOIN messages m ON m.id = mr.message_id WHERE m.conversation_id IN (SELECT id FROM dm_conversations)")
    BLOCKED_CONVERSATIONS=$(run_sql "SELECT COUNT(*) FROM dm_conversations WHERE is_blocked = true")
    
    echo "  üí¨ Conversations DM totales: $TOTAL_DM_CONVERSATIONS"
    echo "  üìù Messages DM totaux: $TOTAL_DM_MESSAGES"
    echo "  üòä R√©actions DM totales: $TOTAL_DM_REACTIONS"
    echo "  üö´ Conversations bloqu√©es: $BLOCKED_CONVERSATIONS"
}

# Test 9: Performance et requ√™tes complexes DM
test_dm_complex_queries() {
    echo "‚ö° Test 9: Requ√™tes complexes DM..."
    
    # Requ√™te complexe: messages DM avec toutes les m√©tadonn√©es
    echo "üîç Messages DM avec r√©actions et mentions:"
    run_sql "
    SELECT 
        CASE 
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $BOB_ID THEN 'Alice-Bob'
            WHEN dc.user1_id = $ALICE_ID AND dc.user2_id = $CAROL_ID THEN 'Alice-Carol'
            WHEN dc.user1_id = $BOB_ID AND dc.user2_id = $CAROL_ID THEN 'Bob-Carol'
        END as conversation,
        m.content,
        COUNT(DISTINCT mr.id) as reaction_count,
        COUNT(DISTINCT mm.id) as mention_count,
        m.thread_count,
        m.is_pinned,
        m.is_edited
    FROM dm_conversations dc
    JOIN messages m ON m.conversation_id = dc.id
    LEFT JOIN message_reactions mr ON mr.message_id = m.id
    LEFT JOIN message_mentions mm ON mm.message_id = m.id
    WHERE dc.id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID)
    GROUP BY dc.id, m.id, m.content, m.thread_count, m.is_pinned, m.is_edited
    ORDER BY m.created_at;
    " | while IFS='|' read -r conversation content reactions mentions threads pinned edited; do
        indicators=""
        [ "$pinned" = "t" ] && indicators="$indicatorsüìå"
        [ "$edited" = "t" ] && indicators="$indicators‚úèÔ∏è"
        [ "$threads" -gt 0 ] && indicators="$indicatorsüßµ($threads)"
        echo "  üí¨ $conversation: \"$content\" - üòäx$reactions üîîx$mentions $indicators"
    done
    
    # Test de performance
    echo ""
    echo "‚è±Ô∏è  Test de performance - requ√™te complexe DM..."
    start_time=$(date +%s%N)
    
    run_sql "
    SELECT 
        COUNT(DISTINCT dc.id) as conversations,
        COUNT(DISTINCT m.id) as messages,
        COUNT(DISTINCT mr.id) as reactions,
        AVG(m.thread_count) as avg_threads
    FROM dm_conversations dc
    LEFT JOIN messages m ON m.conversation_id = dc.id
    LEFT JOIN message_reactions mr ON mr.message_id = m.id
    WHERE dc.created_at > NOW() - INTERVAL '1 day';
    " > /dev/null
    
    end_time=$(date +%s%N)
    duration=$(( (end_time - start_time) / 1000000 ))
    
    echo "‚úÖ Requ√™te complexe DM ex√©cut√©e en ${duration}ms"
}

# Test 10: Comparaison DM vs Salons
test_dm_vs_rooms_comparison() {
    echo "‚öñÔ∏è  Test 10: Comparaison DM vs Salons..."
    
    echo "üìä Comparaison des fonctionnalit√©s:"
    
    # Messages de base
    DM_MESSAGES=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM dm_conversations)")
    ROOM_MESSAGES=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM conversations WHERE type = 'public_room')")
    echo "  üìù Messages de base: DM=$DM_MESSAGES, Salons=$ROOM_MESSAGES ‚úÖ"
    
    # Historique pagin√©
    echo "  üìö Historique pagin√©: DM=‚úÖ, Salons=‚úÖ ‚úÖ"
    
    # Multi-utilisateurs (DM=2, Salons=N)
    echo "  üë• Multi-utilisateurs: DM=‚úÖ(2), Salons=‚úÖ(N) ‚úÖ"
    
    # R√©actions
    DM_REACTIONS=$(run_sql "SELECT COUNT(*) FROM message_reactions mr JOIN messages m ON m.id = mr.message_id WHERE m.conversation_id IN (SELECT id FROM dm_conversations)")
    ROOM_REACTIONS=$(run_sql "SELECT COUNT(*) FROM message_reactions mr JOIN messages m ON m.id = mr.message_id WHERE m.conversation_id IN (SELECT id FROM conversations WHERE type = 'public_room')")
    echo "  üòä R√©actions: DM=$DM_REACTIONS, Salons=$ROOM_REACTIONS ‚úÖ"
    
    # Messages √©pingl√©s
    DM_PINNED=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM dm_conversations) AND is_pinned = true")
    ROOM_PINNED=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM conversations WHERE type = 'public_room') AND is_pinned = true")
    echo "  üìå Messages √©pingl√©s: DM=$DM_PINNED, Salons=$ROOM_PINNED ‚úÖ"
    
    # Threads
    DM_THREADS=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM dm_conversations) AND parent_message_id IS NOT NULL")
    ROOM_THREADS=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM conversations WHERE type = 'public_room') AND parent_message_id IS NOT NULL")
    echo "  üßµ Threads: DM=$DM_THREADS, Salons=$ROOM_THREADS ‚úÖ"
    
    # Mentions
    DM_MENTIONS=$(run_sql "SELECT COUNT(*) FROM message_mentions mm JOIN messages m ON m.id = mm.message_id WHERE m.conversation_id IN (SELECT id FROM dm_conversations)")
    ROOM_MENTIONS=$(run_sql "SELECT COUNT(*) FROM message_mentions mm JOIN messages m ON m.id = mm.message_id WHERE m.conversation_id IN (SELECT id FROM conversations WHERE type = 'public_room')")
    echo "  üîî Mentions @user: DM=$DM_MENTIONS, Salons=$ROOM_MENTIONS ‚úÖ"
    
    # Mod√©ration (blocage pour DM, r√¥les pour salons)
    DM_BLOCKED=$(run_sql "SELECT COUNT(*) FROM dm_conversations WHERE is_blocked = true")
    ROOM_MODERATION=$(run_sql "SELECT COUNT(*) FROM conversation_members WHERE role IN ('owner', 'moderator')")
    echo "  üõ°Ô∏è  Mod√©ration: DM=$DM_BLOCKED bloqu√©es, Salons=$ROOM_MODERATION mod√©rateurs ‚úÖ"
    
    # Audit logs
    DM_AUDIT=$(run_sql "SELECT COUNT(*) FROM audit_logs WHERE action LIKE 'dm_%'")
    ROOM_AUDIT=$(run_sql "SELECT COUNT(*) FROM audit_logs WHERE action LIKE 'room_%' OR action LIKE 'member_%'")
    echo "  üìä Audit logs: DM=$DM_AUDIT, Salons=$ROOM_AUDIT ‚úÖ"
    
    # M√©tadonn√©es
    DM_METADATA=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM dm_conversations) AND metadata != '{}'")
    ROOM_METADATA=$(run_sql "SELECT COUNT(*) FROM messages WHERE conversation_id IN (SELECT id FROM conversations WHERE type = 'public_room') AND metadata != '{}'")
    echo "  üìã M√©tadonn√©es: DM=$DM_METADATA, Salons=$ROOM_METADATA ‚úÖ"
    
    echo ""
    echo "üéâ R√âSULTAT: DM et Salons ont maintenant les M√äMES fonctionnalit√©s! ‚úÖ‚úÖ‚úÖ"
}

# Nettoyage des donn√©es de test
cleanup_test_data() {
    echo "üßπ Nettoyage des donn√©es de test DM..."
    
    # Supprimer dans l'ordre inverse des d√©pendances
    run_sql "DELETE FROM message_reactions WHERE message_id IN (SELECT id FROM messages WHERE conversation_id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID))"
    run_sql "DELETE FROM message_mentions WHERE message_id IN (SELECT id FROM messages WHERE conversation_id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID))"
    run_sql "DELETE FROM messages WHERE conversation_id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID)"
    run_sql "DELETE FROM dm_conversations WHERE id IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID)"
    run_sql "DELETE FROM audit_logs WHERE action LIKE 'dm_%' AND (details->>'conversation_id')::bigint IN ($CONV_AB_ID, $CONV_AC_ID, $CONV_BC_ID)"
    run_sql "DELETE FROM users WHERE username IN ('alice_dm_test', 'bob_dm_test', 'carol_dm_test')"
    
    echo "‚úÖ Donn√©es de test DM supprim√©es"
}

# Fonction principale
main() {
    echo "üöÄ D√©marrage des tests DM enrichis..."
    
    # V√©rifier la connexion √† la base
    if ! run_sql "SELECT 1" > /dev/null 2>&1; then
        echo "‚ùå Impossible de se connecter √† la base de donn√©es"
        exit 1
    fi
    echo "‚úÖ Connexion √† la base de donn√©es OK"
    
    # V√©rifier que la table dm_conversations existe
    TABLE_EXISTS=$(run_sql "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'dm_conversations')")
    if [ "$TABLE_EXISTS" != "t" ]; then
        echo "‚ùå Table dm_conversations non trouv√©e. Ex√©cutez d'abord: ./scripts/run_dm_migration.sh"
        exit 1
    fi
    echo "‚úÖ Table dm_conversations trouv√©e"
    
    # Ex√©cuter les tests
    create_test_data
    test_dm_messages_enrichis
    test_dm_reactions
    test_dm_pinned_messages
    test_dm_mentions
    test_dm_message_editing
    test_dm_blocking
    test_dm_audit_logs
    test_dm_statistics
    test_dm_complex_queries
    test_dm_vs_rooms_comparison
    
    echo ""
    echo "üéâ Tous les tests DM enrichis sont pass√©s avec succ√®s!"
    echo ""
    echo "üìä R√©sum√© des fonctionnalit√©s test√©es:"
    echo "  ‚úÖ Messages enrichis avec m√©tadonn√©es et threads"
    echo "  ‚úÖ Syst√®me de r√©actions emoji"
    echo "  ‚úÖ Messages √©pingl√©s"
    echo "  ‚úÖ Syst√®me de mentions @username"
    echo "  ‚úÖ √âdition de messages avec historique"
    echo "  ‚úÖ Blocage de conversations"
    echo "  ‚úÖ Logs d'audit complets"
    echo "  ‚úÖ Statistiques avanc√©es"
    echo "  ‚úÖ Requ√™tes complexes performantes"
    echo "  ‚úÖ Parit√© compl√®te avec les salons"
    echo ""
    echo "üèÜ DM et Salons ont maintenant EXACTEMENT les m√™mes fonctionnalit√©s!"
    echo ""
    
    # Demander si on doit nettoyer
    read -p "üßπ Voulez-vous nettoyer les donn√©es de test? (o/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[OoYy]$ ]]; then
        cleanup_test_data
    else
        echo "üìù Donn√©es de test conserv√©es pour inspection manuelle"
        echo "   Conversations: Alice-Bob($CONV_AB_ID), Alice-Carol($CONV_AC_ID), Bob-Carol($CONV_BC_ID)"
        echo "   Utilisateurs: Alice($ALICE_ID), Bob($BOB_ID), Carol($CAROL_ID)"
    fi
}

# Gestion des erreurs
trap 'echo "‚ùå Erreur d√©tect√©e, nettoyage..."; cleanup_test_data 2>/dev/null || true; exit 1' ERR

# Ex√©cution
main "$@" 
-- ================================================================
-- MIGRATION DE NETTOYAGE ET MISE √Ä JOUR POUR PRODUCTION
-- Version: 0.2.0 - Compatible avec structure existante
-- ================================================================
-- ‚ö†Ô∏è  ATTENTION: Cette migration est partiellement destructive
-- üîí Assurez-vous d'avoir une sauvegarde compl√®te avant ex√©cution
-- 
-- Utilisation:
-- psql -h 10.5.191.47 -U veza -d veza_db -f migrations/999_cleanup_production_ready_fixed.sql
-- ================================================================

\echo 'üöÄ D√©but de la migration de production...'

-- V√©rifier que nous sommes dans la bonne base
SELECT current_database() as current_db, current_user as current_user_name;

-- Cr√©er l'extension UUID si pas pr√©sente
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ================================================================
-- √âTAPE 1: SAUVEGARDE DES DONN√âES EXISTANTES
-- ================================================================

\echo 'üíæ Sauvegarde des donn√©es existantes...'

-- Sauvegarder les utilisateurs existants
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users') THEN
        CREATE TEMP TABLE temp_old_users AS 
        SELECT id, username, email, created_at, role
        FROM users;
        
        RAISE NOTICE 'Sauvegarde de % utilisateurs', (SELECT COUNT(*) FROM temp_old_users);
    ELSE
        RAISE NOTICE 'Table users non trouv√©e, cr√©ation n√©cessaire';
    END IF;
END $$;

-- Sauvegarder les messages existants
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'messages') THEN
        CREATE TEMP TABLE temp_old_messages AS
        SELECT id, from_user, to_user, room, content, created_at, message_type
        FROM messages;
        
        RAISE NOTICE 'Sauvegarde de % messages', (SELECT COUNT(*) FROM temp_old_messages);
    ELSE
        RAISE NOTICE 'Table messages non trouv√©e, cr√©ation n√©cessaire';
    END IF;
END $$;

-- ================================================================
-- √âTAPE 2: SUPPRESSION S√âCURIS√âE DES TABLES REDONDANTES
-- ================================================================

\echo 'üßπ Suppression des tables redondantes...'

-- Supprimer uniquement les tables qui existent et sont redondantes
DROP TABLE IF EXISTS users_enhanced CASCADE;
DROP TABLE IF EXISTS users_backup CASCADE;
DROP TABLE IF EXISTS rooms_enhanced CASCADE;
DROP TABLE IF EXISTS messages_enhanced CASCADE;
DROP TABLE IF EXISTS message_mentions_enhanced CASCADE;
DROP TABLE IF EXISTS message_mentions_secure CASCADE;
DROP TABLE IF EXISTS message_reactions_enhanced CASCADE;
DROP TABLE IF EXISTS room_members_enhanced CASCADE;
DROP TABLE IF EXISTS user_sessions_enhanced CASCADE;
DROP TABLE IF EXISTS user_sessions_secure CASCADE;
DROP TABLE IF EXISTS user_blocks_enhanced CASCADE;
DROP TABLE IF EXISTS user_blocks_secure CASCADE;
DROP TABLE IF EXISTS security_events_enhanced CASCADE;
DROP TABLE IF EXISTS security_events_secure CASCADE;

-- Supprimer les tables m√©tier obsol√®tes (si elles existent)
DROP TABLE IF EXISTS listings CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS user_products CASCADE;
DROP TABLE IF EXISTS internal_documents CASCADE;
DROP TABLE IF EXISTS shared_ressources CASCADE;
DROP TABLE IF EXISTS shared_ressource_tags CASCADE;
DROP TABLE IF EXISTS ressource_tags CASCADE;
DROP TABLE IF EXISTS tracks CASCADE;

-- ================================================================
-- √âTAPE 3: CR√âATION DES TYPES ENUMS N√âCESSAIRES
-- ================================================================

\echo 'üìã Cr√©ation des types √©num√©r√©s...'

-- Type pour les r√¥les utilisateur
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
        CREATE TYPE user_role AS ENUM ('user', 'moderator', 'admin', 'super_admin');
        RAISE NOTICE 'Type user_role cr√©√©';
    ELSE
        RAISE NOTICE 'Type user_role existe d√©j√†';
    END IF;
END $$;

-- Type pour les statuts de message
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'message_status') THEN
        CREATE TYPE message_status AS ENUM ('sent', 'delivered', 'read', 'edited', 'deleted');
        RAISE NOTICE 'Type message_status cr√©√©';
    ELSE
        RAISE NOTICE 'Type message_status existe d√©j√†';
    END IF;
END $$;

-- Type pour les types de conversation
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'conversation_type') THEN
        CREATE TYPE conversation_type AS ENUM ('direct_message', 'public_room', 'private_room', 'group');
        RAISE NOTICE 'Type conversation_type cr√©√©';
    ELSE
        RAISE NOTICE 'Type conversation_type existe d√©j√†';
    END IF;
END $$;

-- ================================================================
-- √âTAPE 4: MISE √Ä JOUR DE LA TABLE USERS
-- ================================================================

\echo 'üë§ Mise √† jour de la table users...'

-- Ajouter UUID si pas d√©j√† pr√©sent
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'users' AND column_name = 'uuid') THEN
        ALTER TABLE users ADD COLUMN uuid UUID DEFAULT uuid_generate_v4();
        ALTER TABLE users ADD CONSTRAINT users_uuid_unique UNIQUE (uuid);
        RAISE NOTICE 'Colonne UUID ajout√©e √† users';
    END IF;
END $$;

-- Ajouter les nouvelles colonnes de s√©curit√©
DO $$
BEGIN
    -- Colonnes de s√©curit√© 2FA
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'users' AND column_name = 'two_factor_enabled') THEN
        ALTER TABLE users ADD COLUMN two_factor_enabled BOOLEAN DEFAULT FALSE;
        ALTER TABLE users ADD COLUMN two_factor_secret VARCHAR(32);
        ALTER TABLE users ADD COLUMN password_reset_token VARCHAR(100);
        ALTER TABLE users ADD COLUMN password_reset_expires TIMESTAMPTZ;
        ALTER TABLE users ADD COLUMN email_verification_token VARCHAR(100);
        RAISE NOTICE 'Colonnes 2FA ajout√©es √† users';
    END IF;

    -- Colonnes de profil
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'users' AND column_name = 'display_name') THEN
        ALTER TABLE users ADD COLUMN display_name VARCHAR(100);
        ALTER TABLE users ADD COLUMN avatar_url TEXT;
        ALTER TABLE users ADD COLUMN bio TEXT CHECK (LENGTH(bio) <= 500);
        RAISE NOTICE 'Colonnes de profil ajout√©es √† users';
    END IF;

    -- Colonnes de m√©tadonn√©es
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'users' AND column_name = 'last_login') THEN
        ALTER TABLE users ADD COLUMN last_login TIMESTAMPTZ;
        ALTER TABLE users ADD COLUMN last_activity TIMESTAMPTZ DEFAULT NOW();
        ALTER TABLE users ADD COLUMN updated_at TIMESTAMPTZ DEFAULT NOW();
        RAISE NOTICE 'Colonnes de m√©tadonn√©es ajout√©es √† users';
    END IF;

    -- Colonnes de permissions
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'users' AND column_name = 'is_verified') THEN
        ALTER TABLE users ADD COLUMN is_verified BOOLEAN DEFAULT FALSE;
        ALTER TABLE users ADD COLUMN is_active BOOLEAN DEFAULT TRUE;
        RAISE NOTICE 'Colonnes de permissions ajout√©es √† users';
    END IF;
END $$;

-- Mise √† jour du type de r√¥le
DO $$
BEGIN
    -- V√©rifier si la colonne role existe et la convertir
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'users' AND column_name = 'role') THEN
        -- Sauvegarder les valeurs existantes avant conversion
        UPDATE users SET role = 'user' WHERE role IS NULL OR role = '';
        
        -- Convertir vers le nouveau type (si ce n'est pas d√©j√† fait)
        BEGIN
            ALTER TABLE users ALTER COLUMN role TYPE user_role USING role::user_role;
            RAISE NOTICE 'Colonne role convertie vers user_role';
        EXCEPTION 
            WHEN OTHERS THEN
                RAISE NOTICE 'Colonne role d√©j√† au bon type ou erreur: %', SQLERRM;
        END;
    ELSE
        ALTER TABLE users ADD COLUMN role user_role DEFAULT 'user' NOT NULL;
        RAISE NOTICE 'Colonne role ajout√©e avec type user_role';
    END IF;
END $$;

-- ================================================================
-- √âTAPE 5: CR√âATION DE LA TABLE CONVERSATIONS
-- ================================================================

\echo 'üí¨ Cr√©ation de la table conversations...'

CREATE TABLE IF NOT EXISTS conversations (
    id BIGSERIAL PRIMARY KEY,
    uuid UUID DEFAULT uuid_generate_v4() UNIQUE NOT NULL,
    type conversation_type NOT NULL DEFAULT 'direct_message',
    name VARCHAR(100),
    description TEXT,
    owner_id BIGINT NOT NULL,
    is_public BOOLEAN DEFAULT FALSE NOT NULL,
    is_archived BOOLEAN DEFAULT FALSE NOT NULL,
    max_members INTEGER DEFAULT 100,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    CONSTRAINT conversations_owner_fk FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
);

-- ================================================================
-- √âTAPE 6: MISE √Ä JOUR DE LA TABLE MESSAGES
-- ================================================================

\echo 'üí¨ Mise √† jour de la table messages...'

-- Ajouter UUID aux messages si pas pr√©sent
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'messages' AND column_name = 'uuid') THEN
        ALTER TABLE messages ADD COLUMN uuid UUID DEFAULT uuid_generate_v4();
        ALTER TABLE messages ADD CONSTRAINT messages_uuid_unique UNIQUE (uuid);
        RAISE NOTICE 'UUID ajout√© √† messages';
    END IF;
END $$;

-- Renommer les colonnes pour coh√©rence
DO $$
BEGIN
    -- Renommer from_user en author_id si n√©cessaire
    IF EXISTS (SELECT 1 FROM information_schema.columns 
               WHERE table_name = 'messages' AND column_name = 'from_user') 
       AND NOT EXISTS (SELECT 1 FROM information_schema.columns 
                       WHERE table_name = 'messages' AND column_name = 'author_id') THEN
        ALTER TABLE messages RENAME COLUMN from_user TO author_id;
        RAISE NOTICE 'Colonne from_user renomm√©e en author_id';
    END IF;
END $$;

-- Ajouter conversation_id
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'messages' AND column_name = 'conversation_id') THEN
        ALTER TABLE messages ADD COLUMN conversation_id BIGINT;
        RAISE NOTICE 'Colonne conversation_id ajout√©e';
        
        -- Cr√©er des conversations par d√©faut pour les messages existants
        -- 1. Pour les messages de room (publiques)
        INSERT INTO conversations (type, name, owner_id, is_public)
        SELECT DISTINCT 'public_room'::conversation_type, room, 1, TRUE
        FROM messages 
        WHERE room IS NOT NULL 
        AND NOT EXISTS (
            SELECT 1 FROM conversations 
            WHERE type = 'public_room' AND name = messages.room
        );
        
        -- 2. Mettre √† jour les messages avec les IDs de conversation
        UPDATE messages SET conversation_id = (
            SELECT c.id FROM conversations c 
            WHERE c.type = 'public_room' AND c.name = messages.room
        ) WHERE room IS NOT NULL;
        
        RAISE NOTICE 'Conversations cr√©√©es pour les rooms existantes';
    END IF;
END $$;

-- Ajouter les nouvelles colonnes pour fonctionnalit√©s avanc√©es
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'messages' AND column_name = 'parent_message_id') THEN
        ALTER TABLE messages ADD COLUMN parent_message_id BIGINT REFERENCES messages(id) ON DELETE SET NULL;
        ALTER TABLE messages ADD COLUMN thread_count INTEGER DEFAULT 0;
        ALTER TABLE messages ADD COLUMN status message_status DEFAULT 'sent' NOT NULL;
        ALTER TABLE messages ADD COLUMN is_edited BOOLEAN DEFAULT FALSE;
        ALTER TABLE messages ADD COLUMN edit_count INTEGER DEFAULT 0;
        ALTER TABLE messages ADD COLUMN is_pinned BOOLEAN DEFAULT FALSE;
        ALTER TABLE messages ADD COLUMN metadata JSONB DEFAULT '{}';
        ALTER TABLE messages ADD COLUMN updated_at TIMESTAMPTZ DEFAULT NOW();
        ALTER TABLE messages ADD COLUMN edited_at TIMESTAMPTZ;
        RAISE NOTICE 'Nouvelles colonnes ajout√©es √† messages';
    END IF;
END $$;

-- ================================================================
-- √âTAPE 7: CR√âATION DES TABLES COMPL√âMENTAIRES
-- ================================================================

\echo 'üìã Cr√©ation des tables compl√©mentaires...'

-- Table pour les membres de conversations
CREATE TABLE IF NOT EXISTS conversation_members (
    id BIGSERIAL PRIMARY KEY,
    conversation_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    role VARCHAR(20) DEFAULT 'member' NOT NULL,
    joined_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    left_at TIMESTAMPTZ,
    is_muted BOOLEAN DEFAULT FALSE,
    
    CONSTRAINT conversation_members_conversation_fk FOREIGN KEY (conversation_id) REFERENCES conversations(id) ON DELETE CASCADE,
    CONSTRAINT conversation_members_user_fk FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT conversation_members_unique UNIQUE (conversation_id, user_id)
);

-- Table pour les r√©actions aux messages
CREATE TABLE IF NOT EXISTS message_reactions (
    id BIGSERIAL PRIMARY KEY,
    message_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    emoji VARCHAR(20) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    CONSTRAINT message_reactions_message_fk FOREIGN KEY (message_id) REFERENCES messages(id) ON DELETE CASCADE,
    CONSTRAINT message_reactions_user_fk FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT message_reactions_unique UNIQUE (message_id, user_id, emoji)
);

-- Table pour les mentions
CREATE TABLE IF NOT EXISTS message_mentions (
    id BIGSERIAL PRIMARY KEY,
    message_id BIGINT NOT NULL,
    mentioned_user_id BIGINT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    CONSTRAINT message_mentions_message_fk FOREIGN KEY (message_id) REFERENCES messages(id) ON DELETE CASCADE,
    CONSTRAINT message_mentions_user_fk FOREIGN KEY (mentioned_user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT message_mentions_unique UNIQUE (message_id, mentioned_user_id)
);

-- Table pour l'historique des messages
CREATE TABLE IF NOT EXISTS message_history (
    id BIGSERIAL PRIMARY KEY,
    message_id BIGINT NOT NULL,
    old_content TEXT NOT NULL,
    edited_by BIGINT NOT NULL,
    edited_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    CONSTRAINT message_history_message_fk FOREIGN KEY (message_id) REFERENCES messages(id) ON DELETE CASCADE,
    CONSTRAINT message_history_user_fk FOREIGN KEY (edited_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Table pour les sessions utilisateur
CREATE TABLE IF NOT EXISTS user_sessions (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    session_token VARCHAR(255) UNIQUE NOT NULL,
    refresh_token VARCHAR(255) UNIQUE,
    device_info TEXT,
    ip_address INET,
    user_agent TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    expires_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    last_activity TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    
    CONSTRAINT user_sessions_user_fk FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- ================================================================
-- √âTAPE 8: CR√âATION DES INDEX DE PERFORMANCE
-- ================================================================

\echo '‚ö° Cr√©ation des index de performance...'

-- Index pour users
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_username_active 
ON users(username) WHERE is_active = TRUE;

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email_verified 
ON users(email) WHERE is_verified = TRUE;

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_last_activity 
ON users(last_activity DESC) WHERE is_active = TRUE;

-- Index pour conversations
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_conversations_type_public 
ON conversations(type) WHERE is_public = TRUE;

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_conversations_owner_active 
ON conversations(owner_id) WHERE NOT is_archived;

-- Index pour messages (performance critique)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_messages_conversation_time 
ON messages(conversation_id, created_at DESC);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_messages_author_time 
ON messages(author_id, created_at DESC);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_messages_threads 
ON messages(parent_message_id, created_at) WHERE parent_message_id IS NOT NULL;

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_messages_pinned 
ON messages(conversation_id) WHERE is_pinned = TRUE;

-- Index pour r√©actions
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_reactions_message 
ON message_reactions(message_id, emoji);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_reactions_user 
ON message_reactions(user_id, created_at DESC);

-- Index pour mentions
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_mentions_user_unread 
ON message_mentions(mentioned_user_id) WHERE is_read = FALSE;

-- Index pour sessions
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sessions_user_active 
ON user_sessions(user_id) WHERE is_active = TRUE;

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_sessions_token 
ON user_sessions(session_token);

-- ================================================================
-- √âTAPE 9: CR√âATION DES FONCTIONS UTILITAIRES
-- ================================================================

\echo 'üõ†Ô∏è Cr√©ation des fonctions utilitaires...'

-- Fonction pour obtenir l'ID utilisateur courant (√† impl√©menter c√¥t√© app)
CREATE OR REPLACE FUNCTION current_user_id() 
RETURNS BIGINT AS $$
BEGIN
    -- Cette fonction doit √™tre impl√©ment√©e c√¥t√© application
    -- Pour l'instant, elle retourne NULL
    RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Fonction pour nettoyer les sessions expir√©es
CREATE OR REPLACE FUNCTION cleanup_expired_sessions()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM user_sessions 
    WHERE expires_at < NOW() OR (last_activity < NOW() - INTERVAL '30 days');
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Fonction trigger pour mettre √† jour updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- √âTAPE 10: CR√âATION DES TRIGGERS
-- ================================================================

\echo 'üîî Cr√©ation des triggers...'

-- Triggers pour updated_at
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_conversations_updated_at ON conversations;
CREATE TRIGGER update_conversations_updated_at
    BEFORE UPDATE ON conversations
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_messages_updated_at ON messages;
CREATE TRIGGER update_messages_updated_at
    BEFORE UPDATE ON messages
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- ================================================================
-- √âTAPE 11: V√âRIFICATION ET NETTOYAGE FINAL
-- ================================================================

\echo 'üîç V√©rification finale...'

-- Nettoyer les fonctions obsol√®tes
DROP FUNCTION IF EXISTS cleanup_expired_sessions_secure();
DROP FUNCTION IF EXISTS cleanup_old_audit_logs();
DROP FUNCTION IF EXISTS cleanup_old_data_secure();
DROP FUNCTION IF EXISTS handle_mentions_secure();

-- Mettre √† jour les statistiques
ANALYZE users;
ANALYZE conversations;
ANALYZE messages;
ANALYZE message_reactions;
ANALYZE message_mentions;
ANALYZE user_sessions;

-- Validation finale
DO $$
DECLARE
    user_count INTEGER;
    message_count INTEGER;
    conversation_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO user_count FROM users;
    SELECT COUNT(*) INTO message_count FROM messages;
    SELECT COUNT(*) INTO conversation_count FROM conversations;
    
    RAISE NOTICE '‚úÖ Migration termin√©e avec succ√®s:';
    RAISE NOTICE '   - Utilisateurs: %', user_count;
    RAISE NOTICE '   - Messages: %', message_count;
    RAISE NOTICE '   - Conversations: %', conversation_count;
    
    -- Warnings si probl√®mes d√©tect√©s
    IF user_count = 0 THEN
        RAISE WARNING '‚ö†Ô∏è  Aucun utilisateur trouv√© apr√®s migration';
    END IF;
    
    IF message_count > 0 AND conversation_count = 0 THEN
        RAISE WARNING '‚ö†Ô∏è  Messages pr√©sents mais aucune conversation';
    END IF;
END $$;

-- Nettoyer les tables temporaires
DROP TABLE IF EXISTS temp_old_users;
DROP TABLE IF EXISTS temp_old_messages;

-- ================================================================
-- FINALISATION
-- ================================================================

\echo 'üéâ Migration de production termin√©e avec succ√®s!'
\echo 'üìä Base de donn√©es optimis√©e et pr√™te pour la production'
\echo '‚ö° Index de performance cr√©√©s'
\echo 'üßπ Tables redondantes supprim√©es'
\echo ''
\echo 'Prochaines √©tapes recommand√©es:'
\echo '1. Tester les fonctionnalit√©s principales'
\echo '2. V√©rifier les performances avec des requ√™tes r√©elles'
\echo '3. Configurer les sauvegardes automatiques'
\echo '4. Mettre en place la surveillance'

-- Afficher un r√©sum√© des tables principales
\echo ''
\echo 'üìã Tables principales cr√©√©es/mises √† jour:'
SELECT 
    schemaname,
    tablename,
    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('users', 'conversations', 'messages', 'message_reactions', 'message_mentions', 'user_sessions')
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC; 
#---------------------------------------------------------------------
# Configuration HAProxy pour Veza - Application Web Unifiée
# Load Balancing avancé avec haute disponibilité
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Configuration Globale
#---------------------------------------------------------------------
global
    # Niveau de logging (crit, err, warning, notice, info, debug)
    log stdout local0
    
    # Mode daemon pour la production
    daemon
    
    # Utilisateur et groupe pour la sécurité
    user        haproxy
    group       haproxy
    
    # Nombre de processus worker
    nbproc      1
    nbthread    4
    
    # Taille des buffers
    tune.bufsize        32768
    tune.maxrewrite     8192
    
    # Limits de connexion
    maxconn     4096
    
    # Configuration SSL/TLS
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Stats socket pour l'administration
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    
    # Fichiers de configuration
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid

#---------------------------------------------------------------------
# Configuration par Défaut
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  log-health-checks
    option                  forwardfor
    option                  http-server-close
    retries                 3
    timeout connect         5000ms
    timeout client          50000ms
    timeout server          50000ms
    timeout http-request    15s
    timeout http-keep-alive 15s
    timeout queue           1m
    maxconn                 3000
    
    # Compression
    compression algo gzip
    compression type text/plain text/html text/css text/javascript application/javascript application/json

#---------------------------------------------------------------------
# Interface d'Administration et Monitoring
#---------------------------------------------------------------------
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-node
    stats show-legends
    
    # Métriques pour Prometheus (optionnel)
    http-request use-service prometheus-exporter if { path /metrics }

#---------------------------------------------------------------------
# Frontend Principal - HTTP/HTTPS
#---------------------------------------------------------------------
frontend veza_main
    bind *:80
    
    # Logs détaillés
    option httplog
    capture request header Host len 64
    capture request header User-Agent len 128
    
    # Rate limiting - Protection DDoS
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Headers de sécurité
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Routing basé sur les chemins
    acl is_api path_beg /api
    acl is_chat path_beg /chat
    acl is_stream path_beg /stream
    acl is_admin path_beg /admin
    acl is_websocket hdr(Connection) -i upgrade
    acl is_websocket hdr(Upgrade) -i websocket
    
    # Redirection vers les backends appropriés
    use_backend veza_api if is_api
    use_backend veza_chat if is_chat is_websocket
    use_backend veza_stream if is_stream is_websocket
    use_backend veza_admin if is_admin
    default_backend veza_frontend

#---------------------------------------------------------------------
# Backend API Go - Load Balancing avec Health Checks
#---------------------------------------------------------------------
backend veza_api
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    
    # Configuration pour API REST
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Real-IP %[src]
    
    # Timeout spécifiques pour API
    timeout server 30s
    timeout connect 5s
    
    # CORS headers pour API
    http-response set-header Access-Control-Allow-Origin "*"
    http-response set-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    http-response set-header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    
    server api1 10.5.191.241:8080 check inter 5s fall 2 rise 3
    # server api2 10.5.191.242:8080 check inter 5s fall 2 rise 3

#---------------------------------------------------------------------
# Backend Chat WebSocket - Sticky Sessions
#---------------------------------------------------------------------
backend veza_chat
    balance source
    hash-type consistent
    
    # Configuration WebSocket
    option httpchk GET /chat/health
    http-check expect status 200
    
    # Headers WebSocket
    http-request set-header X-Forwarded-Proto ws
    http-request set-header X-Forwarded-For %[src]
    
    # Timeouts longs pour WebSocket
    timeout server 3600s
    timeout tunnel 3600s
    
    # Sticky sessions pour WebSocket (basé sur IP source)
    server chat1 10.5.191.49:8081 check inter 10s fall 3 rise 2
    # server chat2 10.5.191.50:8081 check inter 10s fall 3 rise 2

#---------------------------------------------------------------------
# Backend Stream WebSocket - Optimisé pour le streaming
#---------------------------------------------------------------------
backend veza_stream
    balance leastconn
    
    # Configuration WebSocket Audio
    option httpchk GET /stream/health
    http-check expect status 200
    
    # Headers WebSocket
    http-request set-header X-Forwarded-Proto ws
    http-request set-header X-Forwarded-For %[src]
    
    # Timeouts très longs pour streaming audio
    timeout server 7200s
    timeout tunnel 7200s
    
    # Optimisé pour streaming (least connections)
    server stream1 10.5.191.196:8082 check inter 15s fall 2 rise 3
    # server stream2 10.5.191.197:8082 check inter 15s fall 2 rise 3

#---------------------------------------------------------------------
# Backend Frontend React - Assets statiques
#---------------------------------------------------------------------
backend veza_frontend
    balance roundrobin
    option httpchk GET /
    http-check expect status 200
    
    # Configuration pour SPA React
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-For %[src]
    
    # Gestion des erreurs 404 pour React Router
    errorfile 404 /etc/haproxy/errors/404-spa.http
    
    server frontend1 10.5.191.41:5173 check inter 10s fall 3 rise 2
    # server frontend2 10.5.191.42:5173 check inter 10s fall 3 rise 2 backup

#---------------------------------------------------------------------
# Backend Base de Données (pour monitoring)
#---------------------------------------------------------------------
backend database_check
    mode tcp
    balance first
    
    # Health check TCP pour PostgreSQL
    option tcp-check
    tcp-check connect port 5432
    
    # Serveurs de base de données
    server postgres-master postgres:5432 check inter 5s fastinter 1s downinter 5s
    server postgres-slave postgres-slave:5432 check backup inter 10s

#---------------------------------------------------------------------
# Backend Redis (pour monitoring)
#---------------------------------------------------------------------
backend redis_check
    mode tcp
    balance first
    
    # Health check TCP pour Redis
    option tcp-check
    tcp-check send "PING\r\n"
    tcp-check expect string "+PONG"
    
    # Serveurs Redis
    server redis-master redis:6379 check inter 5s
    server redis-slave redis-slave:6379 check backup inter 10s

#---------------------------------------------------------------------
# Configuration de Log
#---------------------------------------------------------------------
# Définition des formats de log personnalisés
capture request header Host len 32
capture request header User-agent len 64
capture response header Content-type len 32

#---------------------------------------------------------------------
# Configuration des Erreurs Personnalisées
#---------------------------------------------------------------------
# Pages d'erreur personnalisées
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http

# ═══════════════════════════════════════════════════════════════════════════════
# MONITORING ET SANTÉ
# ═══════════════════════════════════════════════════════════════════════════════

# Backend de monitoring interne
backend veza_health
    balance roundrobin
    option httpchk GET /health
    
    server health_api 10.5.191.241:8080 check
    server health_chat 10.5.191.49:8081 check
    server health_stream 10.5.191.196:8082 check 
name: Documentation CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'docusaurus.config.ts'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'docusaurus.config.ts'
      - 'package.json'
      - 'package-lock.json'

jobs:
  # Vérification de la qualité de la documentation
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for broken links
        run: |
          npm run broken-links
          
      - name: Validate markdown
        run: |
          npm run validate-markdown
          
      - name: Check documentation coverage
        run: |
          npm run check-coverage
          
      - name: Validate diagrams
        run: |
          npm run validate-diagrams

  # Build de la documentation
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-build
          path: build/
          retention-days: 30

  # Tests de la documentation
  test:
    name: Test Documentation
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-build
          path: build/
          
      - name: Run documentation tests
        run: |
          npm run test:docs
          
      - name: Test search functionality
        run: |
          npm run test:search
          
      - name: Test navigation
        run: |
          npm run test:navigation

  # Déploiement en staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run build
        
      - name: Deploy to staging
        run: |
          npm run deploy:staging
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_STAGING }}

  # Déploiement en production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run build
        
      - name: Deploy to production
        run: |
          npm run deploy:production
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}

  # Notification Slack
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#veza-docs'
          text: |
            Documentation deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
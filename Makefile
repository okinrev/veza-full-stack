# Makefile pour Veza - Application Web Unifi√©e
# Commandes pour d√©veloppement, build et d√©ploiement

.PHONY: help dev build start stop clean logs test docker-build docker-up docker-down setup

# Configuration par d√©faut
ENV ?= development
DOCKER_COMPOSE_FILE ?= docker-compose.yml

# Couleurs pour les messages
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Aide par d√©faut
help: ## Afficher l'aide
	@echo "$(BLUE)Veza - Application Web Unifi√©e$(NC)"
	@echo "=================================="
	@echo ""
	@echo "$(GREEN)Commandes disponibles:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

# =============================================================================
# Setup et Installation
# =============================================================================

setup: ## Initialiser le projet (premi√®re fois)
	@echo "$(BLUE)üîß Configuration initiale du projet Veza$(NC)"
	@echo "$(YELLOW)Cr√©ation des r√©pertoires n√©cessaires...$(NC)"
	@mkdir -p logs uploads audio ssl
	@echo "$(YELLOW)Copie du fichier de configuration...$(NC)"
	@cp env.example .env
	@echo "$(YELLOW)Installation des d√©pendances Frontend...$(NC)"
	@cd veza-frontend && npm install
	@echo "$(GREEN)‚úÖ Projet configur√© avec succ√®s!$(NC)"
	@echo "$(BLUE)üìù N'oubliez pas d'√©diter le fichier .env avec vos param√®tres$(NC)"

install-deps: ## Installer toutes les d√©pendances
	@echo "$(BLUE)üì¶ Installation des d√©pendances$(NC)"
	@echo "$(YELLOW)Frontend (React)...$(NC)"
	@cd veza-frontend && npm install
	@echo "$(YELLOW)Backend (Go)...$(NC)"
	@cd veza-backend-api && go mod tidy
	@echo "$(YELLOW)Chat Server (Rust)...$(NC)"
	@cd veza-chat-server && cargo build --release
	@echo "$(YELLOW)Stream Server (Rust)...$(NC)"
	@cd veza-stream-server && cargo build --release
	@echo "$(GREEN)‚úÖ Toutes les d√©pendances install√©es$(NC)"

# =============================================================================
# D√©veloppement Local
# =============================================================================

dev: incus-dev ## D√©marrer l'environnement de d√©veloppement (Incus par d√©faut)

dev-local: ## D√©marrer tous les services en mode d√©veloppement local (sans containers)
	@echo "$(BLUE)üöÄ D√©marrage en mode d√©veloppement local$(NC)"
	@echo "$(YELLOW)Services qui vont d√©marrer:$(NC)"
	@echo "  - Frontend React: http://localhost:5173"
	@echo "  - Backend API Go: http://localhost:8080"
	@echo "  - Chat Server Rust: http://localhost:8081"
	@echo "  - Stream Server Rust: http://localhost:8082"
	@echo ""
	@echo "$(BLUE)üí° Utilisez Ctrl+C pour arr√™ter tous les services$(NC)"
	@echo ""
	@make -j4 dev-frontend dev-backend dev-chat dev-stream

dev-frontend: ## D√©marrer le frontend React uniquement
	@echo "$(BLUE)üé® D√©marrage du Frontend React$(NC)"
	@cd veza-frontend && npm run dev

dev-backend: ## D√©marrer le backend Go uniquement
	@echo "$(BLUE)‚öôÔ∏è D√©marrage du Backend Go$(NC)"
	@cd veza-backend-api && go run cmd/server/main.go

dev-chat: ## D√©marrer le chat server Rust uniquement
	@echo "$(BLUE)üí¨ D√©marrage du Chat Server$(NC)"
	@cd veza-chat-server && cargo run

dev-stream: ## D√©marrer le stream server Rust uniquement
	@echo "$(BLUE)üéµ D√©marrage du Stream Server$(NC)"
	@cd veza-stream-server && cargo run

# =============================================================================
# Build et Production
# =============================================================================

build: ## Construire tous les services pour la production
	@echo "$(BLUE)üî® Construction pour la production$(NC)"
	@make build-frontend
	@make build-backend
	@make build-chat
	@make build-stream
	@echo "$(GREEN)‚úÖ Tous les services construits$(NC)"

build-frontend: ## Construire le frontend React
	@echo "$(YELLOW)üé® Construction du Frontend...$(NC)"
	@cd veza-frontend && npm run build

build-backend: ## Construire le backend Go
	@echo "$(YELLOW)‚öôÔ∏è Construction du Backend...$(NC)"
	@cd veza-backend-api && go build -o bin/server cmd/server/main.go

build-chat: ## Construire le chat server Rust
	@echo "$(YELLOW)üí¨ Construction du Chat Server...$(NC)"
	@cd veza-chat-server && cargo build --release

build-stream: ## Construire le stream server Rust
	@echo "$(YELLOW)üéµ Construction du Stream Server...$(NC)"
	@cd veza-stream-server && cargo build --release

# =============================================================================
# D√©ploiement Unifi√© avec Incus
# =============================================================================

deploy: ## D√©ploiement complet avec le syst√®me unifi√©
	@echo "$(BLUE)üöÄ D√©ploiement complet Veza$(NC)"
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh deploy

deploy-dev: ## D√©ploiement en mode d√©veloppement
	@echo "$(BLUE)üöÄ D√©ploiement d√©veloppement Veza$(NC)"
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh deploy --dev

deploy-apps: ## D√©ployer seulement les applications
	@echo "$(BLUE)üöÄ D√©ploiement applications uniquement$(NC)"
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh apps

deploy-infrastructure: ## D√©ployer seulement l'infrastructure
	@echo "$(BLUE)üöÄ D√©ploiement infrastructure uniquement$(NC)"
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh infrastructure

deploy-rebuild: ## Reconstruction compl√®te avec nettoyage
	@echo "$(BLUE)üöÄ Reconstruction compl√®te$(NC)"
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh rebuild

deploy-test: ## Tester le d√©ploiement
	@echo "$(BLUE)üß™ Tests du d√©ploiement$(NC)"
	@chmod +x scripts/test.sh
	@./scripts/test.sh

deploy-test-quick: ## Tests rapides du d√©ploiement
	@echo "$(BLUE)üß™ Tests rapides$(NC)"
	@chmod +x scripts/test.sh
	@./scripts/test.sh --quick

# Commandes legacy (redirig√©es vers le nouveau syst√®me)
incus-setup: ## Configuration initiale d'Incus (r√©seau et profils)
	@echo "$(YELLOW)‚ö†Ô∏è Commande legacy - utilisez 'make deploy' √† la place$(NC)"
	@chmod +x scripts/deploy.sh  
	@./scripts/deploy.sh setup

incus-deploy: ## D√©ployer tous les containers Incus
	@echo "$(YELLOW)‚ö†Ô∏è Commande legacy - utilisez 'make deploy' √† la place$(NC)"
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh deploy

incus-status: ## V√©rifier le statut des containers Incus
	@chmod +x scripts/incus-status.sh
	@./scripts/incus-status.sh

incus-logs: ## Afficher les logs des containers (usage: make incus-logs CONTAINER=veza-backend)
	@chmod +x scripts/incus-logs.sh
	@./scripts/incus-logs.sh $(CONTAINER)

incus-restart: ## Red√©marrer un container ou tous (usage: make incus-restart CONTAINER=veza-backend)
	@chmod +x scripts/incus-restart.sh
	@./scripts/incus-restart.sh $(CONTAINER) restart

incus-stop: ## Arr√™ter tous les containers Incus
	@chmod +x scripts/incus-restart.sh
	@./scripts/incus-restart.sh all stop

incus-start: ## D√©marrer tous les containers Incus
	@chmod +x scripts/incus-restart.sh
	@./scripts/incus-restart.sh all start

incus-clean: ## Nettoyer compl√®tement l'environnement Incus
	@echo "$(YELLOW)üßπ Nettoyage de l'environnement Incus$(NC)"
	@echo "$(RED)‚ö†Ô∏è Ceci va supprimer tous les containers et profils Veza$(NC)"
	@read -p "Continuer ? (y/N) " confirm && [ "$$confirm" = "y" ] || exit 1
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh clean

incus-dev: ## D√©marrer l'environnement de d√©veloppement Incus complet
	@echo "$(YELLOW)‚ö†Ô∏è Commande legacy - utilisez 'make deploy-dev' √† la place$(NC)"
	@make deploy-dev

# =============================================================================
# Docker (ARCHIV√â - Utilisez Incus √† la place)
# =============================================================================

docker-build: ## [ARCHIVE] Construire les images Docker - UTILISEZ INCUS
	@echo "$(RED)‚ö†Ô∏è Docker est archiv√©, utilisez 'make incus-dev' √† la place$(NC)"
	@echo "$(BLUE)üìÅ Fichiers Docker disponibles dans : archive/docker/$(NC)"
	@exit 1

docker-up: ## [ARCHIVE] D√©marrer avec Docker Compose - UTILISEZ INCUS
	@echo "$(RED)‚ö†Ô∏è Docker est archiv√©, utilisez 'make incus-dev' √† la place$(NC)"
	@echo "$(BLUE)üìÅ Fichiers Docker disponibles dans : archive/docker/$(NC)"
	@exit 1

docker-down: ## [ARCHIVE] Arr√™ter Docker Compose - UTILISEZ INCUS
	@echo "$(RED)‚ö†Ô∏è Docker est archiv√©, utilisez 'make incus-stop' √† la place$(NC)"
	@exit 1

docker-restart: ## [ARCHIVE] Red√©marrer Docker Compose - UTILISEZ INCUS
	@echo "$(RED)‚ö†Ô∏è Docker est archiv√©, utilisez 'make incus-restart CONTAINER=all' √† la place$(NC)"
	@exit 1

docker-logs: ## [ARCHIVE] Voir les logs Docker - UTILISEZ INCUS
	@echo "$(RED)‚ö†Ô∏è Docker est archiv√©, utilisez 'make incus-logs CONTAINER=all' √† la place$(NC)"
	@exit 1

docker-clean: ## [ARCHIVE] Nettoyer Docker - UTILISEZ INCUS
	@echo "$(RED)‚ö†Ô∏è Docker est archiv√©, utilisez 'make incus-clean' √† la place$(NC)"
	@exit 1

# =============================================================================
# Base de Donn√©es
# =============================================================================

db-setup: ## Initialiser la base de donn√©es (Incus)
	@echo "$(BLUE)üóÑÔ∏è Initialisation de la base de donn√©es$(NC)"
	@incus exec veza-postgres -- psql -U veza_user -d veza_db -f /tmp/init-db.sql
	@echo "$(GREEN)‚úÖ Base de donn√©es initialis√©e$(NC)"

db-migrate: ## Ex√©cuter les migrations
	@echo "$(BLUE)üìä Ex√©cution des migrations$(NC)"
	@cd veza-backend-api && go run cmd/migrate/main.go
	@echo "$(GREEN)‚úÖ Migrations ex√©cut√©es$(NC)"

db-migrate-existing: ## Migrer une base de donn√©es existante (Incus)
	@echo "$(BLUE)üîÑ Migration de la base de donn√©es existante$(NC)"
	@incus exec veza-postgres -- psql -U veza_user -d veza_db -f /tmp/migrate-existing-db.sql
	@echo "$(GREEN)‚úÖ Migration existante termin√©e$(NC)"

db-reset: ## R√©initialiser la base de donn√©es (Incus)
	@echo "$(YELLOW)‚ö†Ô∏è R√©initialisation de la base de donn√©es$(NC)"
	@echo "$(RED)‚ö†Ô∏è Ceci va supprimer toutes les donn√©es !$(NC)"
	@read -p "Continuer ? (y/N) " confirm && [ "$$confirm" = "y" ] || exit 1
	@incus stop veza-postgres 2>/dev/null || true
	@incus delete veza-postgres 2>/dev/null || true
	@rm -rf data/postgres/*
	@make incus-deploy
	@sleep 10
	@make db-setup

# =============================================================================
# Tests
# =============================================================================

test: ## Ex√©cuter tous les tests
	@echo "$(BLUE)üß™ Ex√©cution de tous les tests$(NC)"
	@make test-frontend
	@make test-backend
	@make test-chat
	@make test-stream
	@echo "$(GREEN)‚úÖ Tous les tests termin√©s$(NC)"

test-frontend: ## Tests du frontend React
	@echo "$(YELLOW)üé® Tests Frontend...$(NC)"
	@cd veza-frontend && npm test

test-backend: ## Tests du backend Go
	@echo "$(YELLOW)‚öôÔ∏è Tests Backend...$(NC)"
	@cd veza-backend-api && go test ./...

test-chat: ## Tests du chat server Rust
	@echo "$(YELLOW)üí¨ Tests Chat Server...$(NC)"
	@cd veza-chat-server && cargo test

test-stream: ## Tests du stream server Rust
	@echo "$(YELLOW)üéµ Tests Stream Server...$(NC)"
	@cd veza-stream-server && cargo test

test-e2e: ## Tests end-to-end
	@echo "$(YELLOW)üîÑ Tests End-to-End...$(NC)"
	@cd veza-frontend && npm run test:e2e

# =============================================================================
# Monitoring et Logs
# =============================================================================

logs: ## Voir les logs de tous les services (Incus)
	@echo "$(BLUE)üìù Logs des services$(NC)"
	@make incus-logs CONTAINER=all

logs-backend: ## Logs du backend uniquement (Incus)
	@make incus-logs CONTAINER=veza-backend

logs-chat: ## Logs du chat server uniquement (Incus)
	@make incus-logs CONTAINER=veza-chat

logs-stream: ## Logs du stream server uniquement (Incus)
	@make incus-logs CONTAINER=veza-stream

logs-frontend: ## Logs du frontend uniquement (Incus)
	@make incus-logs CONTAINER=veza-frontend

logs-postgres: ## Logs de PostgreSQL (Incus)
	@make incus-logs CONTAINER=veza-postgres

logs-redis: ## Logs de Redis (Incus)
	@make incus-logs CONTAINER=veza-redis

logs-haproxy: ## Logs d'HAProxy (Incus)
	@make incus-logs CONTAINER=veza-haproxy

health: ## V√©rifier la sant√© des services (Incus)
	@echo "$(BLUE)üè• V√©rification de la sant√© des services$(NC)"
	@make incus-status

# =============================================================================
# Gestion ZFS Storage
# =============================================================================

zfs-status: ## Afficher le statut du pool ZFS
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh status

zfs-snapshot: ## Cr√©er des snapshots ZFS des volumes de stockage
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh snapshot

zfs-list: ## Lister tous les snapshots ZFS
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh list-snapshots

zfs-compress: ## Afficher les statistiques de compression ZFS
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh compress-stats

zfs-cleanup: ## Nettoyer les anciens snapshots ZFS (>30 jours)
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh cleanup

zfs-expand: ## √âtendre la taille des volumes ZFS
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh expand

zfs-monitor: ## Monitoring en temps r√©el du stockage ZFS
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh monitor

zfs-restore: ## Instructions pour restaurer depuis un snapshot ZFS
	@chmod +x scripts/incus-zfs-manage.sh
	@./scripts/incus-zfs-manage.sh restore

# =============================================================================
# Utilitaires
# =============================================================================

clean: ## Nettoyer les fichiers de build
	@echo "$(BLUE)üßπ Nettoyage des fichiers de build$(NC)"
	@rm -rf veza-frontend/dist
	@rm -rf veza-frontend/node_modules/.cache
	@rm -rf veza-backend-api/bin
	@rm -rf veza-chat-server/target
	@rm -rf veza-stream-server/target
	@rm -rf logs/*
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

backup: ## Sauvegarder la base de donn√©es (Incus)
	@echo "$(BLUE)üíæ Sauvegarde de la base de donn√©es$(NC)"
	@mkdir -p backups
	@incus exec veza-postgres -- pg_dump -U veza_user veza_db > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans backups/$(NC)"

format: ## Formater le code (tous les langages)
	@echo "$(BLUE)‚ú® Formatage du code$(NC)"
	@cd veza-frontend && npm run lint --fix
	@cd veza-backend-api && go fmt ./...
	@cd veza-chat-server && cargo fmt
	@cd veza-stream-server && cargo fmt
	@echo "$(GREEN)‚úÖ Code format√©$(NC)"

# =============================================================================
# Environnements
# =============================================================================

env-dev: ## Configurer pour le d√©veloppement
	@echo "$(BLUE)üîß Configuration d√©veloppement$(NC)"
	@cp env.example .env
	@echo "$(GREEN)‚úÖ Environnement de d√©veloppement configur√©$(NC)"

env-prod: ## Configurer pour la production
	@echo "$(BLUE)üîß Configuration production$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è V√©rifiez et modifiez les variables dans .env$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è N'oubliez pas de changer les mots de passe et secrets!$(NC)"

# =============================================================================
# Informations
# =============================================================================

status: ## Afficher le statut des services (Incus)
	@echo "$(BLUE)üìä Statut des services$(NC)"
	@make incus-status

info: ## Afficher les informations du projet Veza (Incus)
	@echo "$(BLUE)üìã Informations du projet Veza - Architecture Incus$(NC)"
	@echo "======================================================"
	@echo ""
	@echo "$(GREEN)üåê Services Web:$(NC)"
	@echo "$(YELLOW)  ‚Ä¢ Application HAProxy:$(NC) http://10.100.0.16"
	@echo "$(YELLOW)  ‚Ä¢ HAProxy Stats:$(NC) http://10.100.0.16:8404/stats"
	@echo "$(YELLOW)  ‚Ä¢ Frontend React:$(NC) http://10.100.0.11:5173 (dev)"
	@echo "$(YELLOW)  ‚Ä¢ Backend API Go:$(NC) http://10.100.0.12:8080"
	@echo ""
	@echo "$(GREEN)üîå Services WebSocket:$(NC)"
	@echo "$(YELLOW)  ‚Ä¢ Chat Server Rust:$(NC) ws://10.100.0.13:8081/ws"
	@echo "$(YELLOW)  ‚Ä¢ Stream Server Rust:$(NC) ws://10.100.0.14:8082/ws"
	@echo ""
	@echo "$(GREEN)üóÑÔ∏è Services Infrastructure:$(NC)"
	@echo "$(YELLOW)  ‚Ä¢ PostgreSQL:$(NC) 10.100.0.15:5432"
	@echo "$(YELLOW)  ‚Ä¢ Redis:$(NC) 10.100.0.17:6379"
	@echo "$(YELLOW)  ‚Ä¢ ZFS Storage (NFS):$(NC) 10.100.0.18:2049"
	@echo ""
	@echo "$(GREEN)üêß Containers Incus:$(NC)"
	@echo "$(YELLOW)  ‚Ä¢ veza-postgres$(NC)  - Base de donn√©es PostgreSQL"
	@echo "$(YELLOW)  ‚Ä¢ veza-redis$(NC)     - Cache Redis"
	@echo "$(YELLOW)  ‚Ä¢ veza-storage$(NC)   - Stockage ZFS + NFS"
	@echo "$(YELLOW)  ‚Ä¢ veza-backend$(NC)   - API Backend Go"
	@echo "$(YELLOW)  ‚Ä¢ veza-chat$(NC)      - Serveur Chat Rust"
	@echo "$(YELLOW)  ‚Ä¢ veza-stream$(NC)    - Serveur Stream Rust"
	@echo "$(YELLOW)  ‚Ä¢ veza-frontend$(NC)  - Interface React"
	@echo "$(YELLOW)  ‚Ä¢ veza-haproxy$(NC)   - Load Balancer HAProxy"
	@echo ""
	@echo "$(GREEN)üìñ Documentation:$(NC) Voir les dossiers docs/ dans chaque projet"
	@echo "$(GREEN)üîß Configuration:$(NC) Voir le fichier .env"
	@echo "$(GREEN)üîß Migration BDD existante:$(NC) make db-migrate-existing"
	@echo "$(GREEN)üöÄ D√©marrage rapide:$(NC) make dev (ou make incus-dev)" 
#!/bin/bash

# ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
# ‚îÇ              üóÑÔ∏è Veza Database Setup Script                  ‚îÇ
# ‚îÇ          Script d'initialisation PostgreSQL                 ‚îÇ
# ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CONTAINER_NAME="veza-postgres"
DB_NAME="veza_db"
DB_USER="veza_user"
DB_PASSWORD="veza_password"
SCRIPT_DIR="$(dirname "$0")"
SQL_FILE="$SCRIPT_DIR/init-database.sql"

# Fonctions utilitaires
print_header() {
    echo -e "${BLUE}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ${NC}"
    echo -e "${BLUE}‚îÇ $1${NC}"
    echo -e "${BLUE}‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ${NC}"
}

print_step() {
    echo -e "${YELLOW}‚ö° $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_step "V√©rification des pr√©requis..."
    
    # V√©rifier si le container existe
    if ! incus list | grep -q "$CONTAINER_NAME"; then
        print_error "Container $CONTAINER_NAME non trouv√© !"
        print_info "Lancez d'abord: ./veza deploy"
        exit 1
    fi
    
    # V√©rifier si le container est d√©marr√©
    if ! incus list | grep "$CONTAINER_NAME" | grep -q "RUNNING"; then
        print_error "Container $CONTAINER_NAME n'est pas d√©marr√© !"
        print_info "Lancez: ./veza start"
        exit 1
    fi
    
    # V√©rifier si le fichier SQL existe
    if [ ! -f "$SQL_FILE" ]; then
        print_error "Fichier $SQL_FILE non trouv√© !"
        exit 1
    fi
    
    print_success "Pr√©requis valid√©s"
}

# Test de connexion PostgreSQL
test_postgres_connection() {
    print_step "Test de connexion PostgreSQL..."
    
    if incus exec "$CONTAINER_NAME" -- sudo -u postgres psql -c "SELECT version();" > /dev/null 2>&1; then
        print_success "PostgreSQL est accessible"
        return 0
    else
        print_error "Impossible de se connecter √† PostgreSQL"
        return 1
    fi
}

# Attendre que PostgreSQL soit pr√™t
wait_for_postgres() {
    print_step "Attente du d√©marrage de PostgreSQL..."
    
    local attempts=0
    local max_attempts=30
    
    while [ $attempts -lt $max_attempts ]; do
        if test_postgres_connection; then
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempts=$((attempts + 1))
    done
    
    print_error "PostgreSQL n'est pas pr√™t apr√®s $max_attempts tentatives"
    return 1
}

# Cr√©er la base de donn√©es et l'utilisateur
setup_database() {
    print_step "Configuration de la base de donn√©es..."
    
    # Cr√©er la base de donn√©es si elle n'existe pas
    incus exec "$CONTAINER_NAME" -- sudo -u postgres psql -c "
        CREATE DATABASE $DB_NAME;
    " 2>/dev/null || true
    
    # Cr√©er l'utilisateur si il n'existe pas
    incus exec "$CONTAINER_NAME" -- sudo -u postgres psql -c "
        CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';
        GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
        ALTER USER $DB_USER CREATEDB;
    " 2>/dev/null || true
    
    print_success "Base de donn√©es configur√©e"
}

# Ex√©cuter le script d'initialisation
run_init_script() {
    print_step "Ex√©cution du script d'initialisation..."
    
    # Copier le script SQL dans le container
    incus file push "$SQL_FILE" "$CONTAINER_NAME/tmp/init-database.sql"
    
    # Ex√©cuter le script
    if incus exec "$CONTAINER_NAME" -- sudo -u postgres psql -d "$DB_NAME" -f /tmp/init-database.sql; then
        print_success "Script d'initialisation ex√©cut√© avec succ√®s"
    else
        print_error "Erreur lors de l'ex√©cution du script d'initialisation"
        return 1
    fi
    
    # Nettoyer le fichier temporaire
    incus exec "$CONTAINER_NAME" -- rm -f /tmp/init-database.sql
}

# V√©rifier l'installation
verify_installation() {
    print_step "V√©rification de l'installation..."
    
    # Tester quelques requ√™tes
    local tables_count=$(incus exec "$CONTAINER_NAME" -- sudo -u postgres psql -d "$DB_NAME" -t -c "
        SELECT COUNT(*) FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_type = 'BASE TABLE';
    " | tr -d ' ')
    
    local users_count=$(incus exec "$CONTAINER_NAME" -- sudo -u postgres psql -d "$DB_NAME" -t -c "
        SELECT COUNT(*) FROM users;
    " | tr -d ' ')
    
    print_success "Tables cr√©√©es: $tables_count"
    print_success "Utilisateurs de test: $users_count"
    
    if [ "$tables_count" -gt "10" ] && [ "$users_count" -gt "0" ]; then
        print_success "Installation v√©rifi√©e avec succ√®s !"
        return 0
    else
        print_error "Probl√®me d√©tect√© dans l'installation"
        return 1
    fi
}

# Afficher les informations de connexion
show_connection_info() {
    print_header "Informations de connexion"
    echo -e "${GREEN}üîë Comptes utilisateurs cr√©√©s:${NC}"
    echo -e "   ${YELLOW}Admin:${NC} admin@veza.local / password"
    echo -e "   ${YELLOW}Demo:${NC}  demo@veza.local / password"
    echo -e "   ${YELLOW}Test:${NC}  loulou@free.fr / password"
    echo ""
    echo -e "${GREEN}üóÑÔ∏è Base de donn√©es:${NC}"
    echo -e "   ${YELLOW}Host:${NC}     veza-postgres.lxd (10.5.191.154)"
    echo -e "   ${YELLOW}Database:${NC} $DB_NAME"
    echo -e "   ${YELLOW}User:${NC}     $DB_USER"
    echo -e "   ${YELLOW}Password:${NC} $DB_PASSWORD"
    echo ""
    echo -e "${GREEN}üìä Tables cr√©√©es:${NC}"
    echo -e "   ‚Ä¢ users, refresh_tokens"
    echo -e "   ‚Ä¢ categories, products, user_products"
    echo -e "   ‚Ä¢ tracks, shared_resources"
    echo -e "   ‚Ä¢ listings, offers"
    echo -e "   ‚Ä¢ rooms, room_members, messages"
    echo -e "   ‚Ä¢ tags, files"
}

# Fonction principale
main() {
    print_header "üóÑÔ∏è Initialisation Base de Donn√©es Veza"
    
    check_prerequisites
    wait_for_postgres
    setup_database
    run_init_script
    verify_installation
    show_connection_info
    
    echo ""
    print_success "Base de donn√©es Veza initialis√©e avec succ√®s ! üöÄ"
    print_info "Vous pouvez maintenant red√©marrer le backend: ./veza restart backend"
}

# Gestion des options
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h    Afficher cette aide"
        echo "  --force, -f   Forcer la r√©initialisation (supprime toutes les donn√©es)"
        echo ""
        echo "Ce script initialise la base de donn√©es PostgreSQL pour Veza."
        exit 0
        ;;
    --force|-f)
        print_header "üóÑÔ∏è R√©initialisation Forc√©e de la Base de Donn√©es"
        print_error "ATTENTION: Ceci va supprimer TOUTES les donn√©es existantes !"
        read -p "√ätes-vous s√ªr ? (tapez 'CONFIRMER' pour continuer): " confirm
        if [ "$confirm" = "CONFIRMER" ]; then
            main
        else
            print_info "Op√©ration annul√©e"
            exit 0
        fi
        ;;
    "")
        main
        ;;
    *)
        print_error "Option inconnue: $1"
        print_info "Utilisez --help pour voir les options disponibles"
        exit 1
        ;;
esac 
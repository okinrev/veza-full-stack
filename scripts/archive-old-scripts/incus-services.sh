#!/bin/bash

# Script de gestion des services Veza dans les containers Incus
# Permet de d√©marrer, arr√™ter, red√©marrer et v√©rifier l'√©tat des services

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Services et leurs containers
declare -A SERVICES=(
    ["backend"]="veza-backend:veza-backend"
    ["chat"]="veza-chat:veza-chat"
    ["stream"]="veza-stream:veza-stream"
    ["frontend"]="veza-frontend:veza-frontend"
    ["postgres"]="veza-postgres:postgresql"
    ["redis"]="veza-redis:redis-server"
    ["haproxy"]="veza-haproxy:haproxy"
)

# Fonction d'aide
show_help() {
    echo -e "${PURPLE}üîß Gestionnaire des Services Veza${NC}"
    echo ""
    echo -e "${BLUE}Usage:${NC}"
    echo -e "  $0 <action> [service]"
    echo ""
    echo -e "${BLUE}Actions:${NC}"
    echo -e "  ${GREEN}status${NC}    - Afficher l'√©tat de tous les services"
    echo -e "  ${GREEN}start${NC}     - D√©marrer un service ou tous"
    echo -e "  ${GREEN}stop${NC}      - Arr√™ter un service ou tous"
    echo -e "  ${GREEN}restart${NC}   - Red√©marrer un service ou tous"
    echo -e "  ${GREEN}logs${NC}      - Afficher les logs d'un service"
    echo -e "  ${GREEN}health${NC}    - V√©rifier la sant√© des services"
    echo ""
    echo -e "${BLUE}Services disponibles:${NC}"
    for service in "${!SERVICES[@]}"; do
        echo -e "  ‚Ä¢ ${CYAN}$service${NC}"
    done
    echo ""
    echo -e "${BLUE}Exemples:${NC}"
    echo -e "  $0 status"
    echo -e "  $0 start backend"
    echo -e "  $0 restart chat"
    echo -e "  $0 logs frontend"
}

# V√©rifier l'√©tat d'un service
check_service_status() {
    local service_key=$1
    local container_service=(${SERVICES[$service_key]//:/ })
    local container=${container_service[0]}
    local service=${container_service[1]}
    
    if incus exec "$container" -- systemctl is-active "$service" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $service_key (actif)${NC}"
        return 0
    elif incus exec "$container" -- systemctl is-failed "$service" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå $service_key (√©chec)${NC}"
        return 1
    else
        echo -e "${YELLOW}‚è∏Ô∏è $service_key (arr√™t√©)${NC}"
        return 2
    fi
}

# Afficher l'√©tat de tous les services
status_all() {
    echo -e "${BLUE}üìä √âtat des services Veza:${NC}"
    echo ""
    
    for service_key in "${!SERVICES[@]}"; do
        check_service_status "$service_key"
    done
    
    echo ""
    echo -e "${BLUE}üìä √âtat des containers:${NC}"
    incus ls --format=table --columns=n,s,4,6
}

# D√©marrer un service
start_service() {
    local service_key=$1
    local container_service=(${SERVICES[$service_key]//:/ })
    local container=${container_service[0]}
    local service=${container_service[1]}
    
    echo -e "${CYAN}üîÑ D√©marrage de $service_key...${NC}"
    
    if incus exec "$container" -- systemctl start "$service"; then
        echo -e "${GREEN}‚úÖ $service_key d√©marr√©${NC}"
    else
        echo -e "${RED}‚ùå √âchec du d√©marrage de $service_key${NC}"
        return 1
    fi
}

# Arr√™ter un service
stop_service() {
    local service_key=$1
    local container_service=(${SERVICES[$service_key]//:/ })
    local container=${container_service[0]}
    local service=${container_service[1]}
    
    echo -e "${CYAN}‚èπÔ∏è Arr√™t de $service_key...${NC}"
    
    if incus exec "$container" -- systemctl stop "$service"; then
        echo -e "${GREEN}‚úÖ $service_key arr√™t√©${NC}"
    else
        echo -e "${RED}‚ùå √âchec de l'arr√™t de $service_key${NC}"
        return 1
    fi
}

# Red√©marrer un service
restart_service() {
    local service_key=$1
    local container_service=(${SERVICES[$service_key]//:/ })
    local container=${container_service[0]}
    local service=${container_service[1]}
    
    echo -e "${CYAN}üîÑ Red√©marrage de $service_key...${NC}"
    
    if incus exec "$container" -- systemctl restart "$service"; then
        echo -e "${GREEN}‚úÖ $service_key red√©marr√©${NC}"
    else
        echo -e "${RED}‚ùå √âchec du red√©marrage de $service_key${NC}"
        return 1
    fi
}

# Afficher les logs d'un service
logs_service() {
    local service_key=$1
    local container_service=(${SERVICES[$service_key]//:/ })
    local container=${container_service[0]}
    local service=${container_service[1]}
    
    echo -e "${CYAN}üìã Logs de $service_key (Ctrl+C pour quitter):${NC}"
    incus exec "$container" -- journalctl -u "$service" -f --no-pager
}

# V√©rifier la sant√© des services
health_check() {
    echo -e "${BLUE}üè• V√©rification de sant√© des services:${NC}"
    echo ""
    
    # V√©rifier la connectivit√© r√©seau
    echo -e "${CYAN}üåê Test de connectivit√©:${NC}"
    
    # Test PostgreSQL
    if incus exec veza-backend -- nc -z 10.100.0.15 5432; then
        echo -e "${GREEN}‚úÖ PostgreSQL accessible${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL inaccessible${NC}"
    fi
    
    # Test Redis
    if incus exec veza-backend -- nc -z 10.100.0.17 6379; then
        echo -e "${GREEN}‚úÖ Redis accessible${NC}"
    else
        echo -e "${RED}‚ùå Redis inaccessible${NC}"
    fi
    
    # Test Backend API
    if incus exec veza-frontend -- curl -s http://10.100.0.12:8080/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend API r√©pond${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Backend API ne r√©pond pas${NC}"
    fi
    
    # Test Chat WebSocket
    if incus exec veza-frontend -- nc -z 10.100.0.13 8081; then
        echo -e "${GREEN}‚úÖ Chat WebSocket accessible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Chat WebSocket inaccessible${NC}"
    fi
    
    # Test Stream Server
    if incus exec veza-frontend -- nc -z 10.100.0.14 8082; then
        echo -e "${GREEN}‚úÖ Stream Server accessible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Stream Server inaccessible${NC}"
    fi
    
    echo ""
    echo -e "${CYAN}üìä Utilisation des ressources:${NC}"
    incus info --resources
}

# Fonction principale
main() {
    local action=$1
    local service=$2
    
    case $action in
        "status")
            status_all
            ;;
        "start")
            if [ -z "$service" ]; then
                for service_key in backend chat stream frontend; do
                    start_service "$service_key"
                done
            elif [ -n "${SERVICES[$service]}" ]; then
                start_service "$service"
            else
                echo -e "${RED}‚ùå Service '$service' inconnu${NC}"
                show_help
                exit 1
            fi
            ;;
        "stop")
            if [ -z "$service" ]; then
                for service_key in frontend stream chat backend; do
                    stop_service "$service_key"
                done
            elif [ -n "${SERVICES[$service]}" ]; then
                stop_service "$service"
            else
                echo -e "${RED}‚ùå Service '$service' inconnu${NC}"
                show_help
                exit 1
            fi
            ;;
        "restart")
            if [ -z "$service" ]; then
                for service_key in backend chat stream frontend; do
                    restart_service "$service_key"
                done
            elif [ -n "${SERVICES[$service]}" ]; then
                restart_service "$service"
            else
                echo -e "${RED}‚ùå Service '$service' inconnu${NC}"
                show_help
                exit 1
            fi
            ;;
        "logs")
            if [ -n "${SERVICES[$service]}" ]; then
                logs_service "$service"
            else
                echo -e "${RED}‚ùå Vous devez sp√©cifier un service pour les logs${NC}"
                show_help
                exit 1
            fi
            ;;
        "health")
            health_check
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Action '$action' inconnue${NC}"
            show_help
            exit 1
            ;;
    esac
}

# V√©rifier qu'Incus est disponible
if ! command -v incus &> /dev/null; then
    echo -e "${RED}‚ùå Incus n'est pas install√© ou accessible${NC}"
    exit 1
fi

# Ex√©cuter la commande
main "$@" 
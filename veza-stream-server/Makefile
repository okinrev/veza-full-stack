# Makefile pour Stream Server
.PHONY: help build test clean run dev docker-build docker-run fmt lint audit

# Variables
RUST_VERSION := $(shell rustc --version 2>/dev/null || echo "Rust non install√©")
VERSION := $(shell grep '^version' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
CONTAINER_NAME := stream-server
IMAGE_NAME := stream-server

# Colors
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m

help: ## Affiche cette aide
	@echo "$(GREEN)Stream Server v$(VERSION) - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Rust version: $(RUST_VERSION)$(NC)"

build: ## Compile le projet en mode release
	@echo "$(GREEN)üî® Compilation du projet...$(NC)"
	cargo build --release
	@echo "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

build-dev: ## Compile le projet en mode debug
	@echo "$(GREEN)üî® Compilation en mode d√©veloppement...$(NC)"
	cargo build
	@echo "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

build-tools: ## Compile les outils utilitaires
	@echo "$(GREEN)üîß Compilation des outils...$(NC)"
	cd tools && cargo build --release
	@echo "$(GREEN)‚úÖ Outils compil√©s dans tools/target/release/$(NC)"

test: ## Lance tous les tests
	@echo "$(GREEN)üß™ Ex√©cution des tests...$(NC)"
	cargo test --all
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

clean: ## Nettoie les fichiers de build
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	cargo clean
	cd tools && cargo clean
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

run: build ## Compile et lance le serveur
	@echo "$(GREEN)üöÄ D√©marrage du serveur...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Fichier .env non trouv√©, copie depuis env.example...$(NC)"; \
		cp env.example .env; \
	fi
	./target/release/stream_server

dev: ## Lance le serveur en mode d√©veloppement
	@echo "$(GREEN)üîß Mode d√©veloppement...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Fichier .env non trouv√©, copie depuis env.example...$(NC)"; \
		cp env.example .env; \
	fi
	cargo run

fmt: ## Formate le code source
	@echo "$(GREEN)üìù Formatage du code...$(NC)"
	cargo fmt --all
	cd tools && cargo fmt --all
	@echo "$(GREEN)‚úÖ Code format√©$(NC)"

lint: ## V√©rifie la qualit√© du code avec clippy
	@echo "$(GREEN)üîç V√©rification avec clippy...$(NC)"
	cargo clippy --all-targets --all-features -- -D warnings
	cd tools && cargo clippy --all-targets --all-features -- -D warnings
	@echo "$(GREEN)‚úÖ V√©rification termin√©e$(NC)"

audit: ## Audit de s√©curit√© des d√©pendances
	@echo "$(GREEN)üîí Audit de s√©curit√©...$(NC)"
	cargo audit
	@echo "$(GREEN)‚úÖ Audit termin√©$(NC)"

docker-build: ## Construit l'image Docker
	@echo "$(GREEN)üê≥ Construction de l'image Docker...$(NC)"
	docker build -t $(IMAGE_NAME):$(VERSION) -t $(IMAGE_NAME):latest .
	@echo "$(GREEN)‚úÖ Image Docker construite: $(IMAGE_NAME):$(VERSION)$(NC)"

docker-run: docker-build ## Lance le serveur dans Docker
	@echo "$(GREEN)üê≥ D√©marrage du conteneur Docker...$(NC)"
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p 8082:8082 \
		-v "$(PWD)/audio:/app/audio:ro" \
		-v "$(PWD)/.env:/app/.env:ro" \
		$(IMAGE_NAME):latest
	@echo "$(GREEN)‚úÖ Conteneur d√©marr√©: http://localhost:8082$(NC)"

docker-stop: ## Arr√™te et supprime le conteneur Docker
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t du conteneur...$(NC)"
	-docker stop $(CONTAINER_NAME) 2>/dev/null || true
	-docker rm $(CONTAINER_NAME) 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Conteneur arr√™t√©$(NC)"

docker-logs: ## Affiche les logs du conteneur
	@echo "$(GREEN)üìã Logs du conteneur:$(NC)"
	docker logs -f $(CONTAINER_NAME)

health-check: ## V√©rifie la sant√© du serveur
	@echo "$(GREEN)üè• V√©rification de la sant√© du serveur...$(NC)"
	@curl -s http://localhost:8082/health | jq . || echo "$(RED)‚ùå Serveur non accessible$(NC)"

install-deps: ## Installe les d√©pendances syst√®me n√©cessaires
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	@if command -v apt-get >/dev/null 2>&1; then \
		sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev; \
	elif command -v dnf >/dev/null 2>&1; then \
		sudo dnf install -y pkgconfig openssl-devel; \
	elif command -v pacman >/dev/null 2>&1; then \
		sudo pacman -S pkg-config openssl; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Gestionnaire de paquets non reconnu$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

setup: install-deps ## Configuration initiale du projet
	@echo "$(GREEN)üõ†Ô∏è  Configuration du projet...$(NC)"
	@if [ ! -f .env ]; then \
		cp env.example .env; \
		echo "$(GREEN)‚úÖ Fichier .env cr√©√©$(NC)"; \
	fi
	@mkdir -p audio logs
	@echo "$(GREEN)‚úÖ R√©pertoires cr√©√©s$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  N'oubliez pas d'√©diter le fichier .env avec vos param√®tres$(NC)"

# T√¢che par d√©faut
all: fmt lint test build

.DEFAULT_GOAL := help 
# Makefile pour Stream Server
.PHONY: help build test clean run dev docker-build docker-run fmt lint audit phase5

# Variables
RUST_VERSION := $(shell rustc --version 2>/dev/null || echo "Rust non install√©")
VERSION := $(shell grep '^version' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
CONTAINER_NAME := stream-server
IMAGE_NAME := stream-server

# Colors
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m

help: ## Affiche cette aide
	@echo "$(GREEN)Stream Server v$(VERSION) - Commandes disponibles:$(NC)"
	@echo ""
	@echo "$(BLUE)üìã PHASE 5 - STREAMING AUDIO AVANC√â:$(NC)"
	@echo "  $(YELLOW)Objectifs: WebRTC + Sync <100ms + Recording temps r√©el + 1000 listeners$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Rust version: $(RUST_VERSION)$(NC)"

build: ## Compile le projet en mode release
	@echo "$(GREEN)üî® Compilation du projet...$(NC)"
	cargo build --release
	@echo "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

build-dev: ## Compile le projet en mode debug
	@echo "$(GREEN)üî® Compilation en mode d√©veloppement...$(NC)"
	cargo build
	@echo "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

build-tools: ## Compile les outils utilitaires
	@echo "$(GREEN)üîß Compilation des outils...$(NC)"
	cd tools && cargo build --release
	@echo "$(GREEN)‚úÖ Outils compil√©s dans tools/target/release/$(NC)"

test: ## Lance tous les tests
	@echo "$(GREEN)üß™ Ex√©cution des tests...$(NC)"
	cargo test --all
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

clean: ## Nettoie les fichiers de build
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	cargo clean
	cd tools && cargo clean
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

run: build ## Compile et lance le serveur
	@echo "$(GREEN)üöÄ D√©marrage du serveur...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Fichier .env non trouv√©, copie depuis env.example...$(NC)"; \
		cp env.example .env; \
	fi
	./target/release/stream_server

dev: ## Lance le serveur en mode d√©veloppement avec m√©triques Phase 5
	@echo "$(BLUE)üîß Mode d√©veloppement Phase 5 avec m√©triques avanc√©es...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Fichier .env non trouv√©, copie depuis env.example...$(NC)"; \
		cp env.example .env; \
	fi
	@echo "$(BLUE)üìä WebRTC + Sync + Recording + Analytics activ√©s$(NC)"
	RUST_LOG=debug cargo run

fmt: ## Formate le code source
	@echo "$(GREEN)üìù Formatage du code...$(NC)"
	cargo fmt --all
	cd tools && cargo fmt --all
	@echo "$(GREEN)‚úÖ Code format√©$(NC)"

lint: ## V√©rifie la qualit√© du code avec clippy
	@echo "$(GREEN)üîç V√©rification avec clippy...$(NC)"
	cargo clippy --all-targets --all-features -- -D warnings
	cd tools && cargo clippy --all-targets --all-features -- -D warnings
	@echo "$(GREEN)‚úÖ V√©rification termin√©e$(NC)"

audit: ## Audit de s√©curit√© des d√©pendances
	@echo "$(GREEN)üîí Audit de s√©curit√©...$(NC)"
	cargo audit
	@echo "$(GREEN)‚úÖ Audit termin√©$(NC)"

# ================================
# COMMANDES PHASE 5 - STREAMING AVANC√â
# ================================

validate: ## üéØ Validation compl√®te Phase 5 - Streaming Audio Avanc√©
	@echo "$(BLUE)üéØ D√âMARRAGE VALIDATION PHASE 5$(NC)"
	@echo "$(BLUE)================================$(NC)"
	@chmod +x scripts/validate_phase5.sh
	@./scripts/validate_phase5.sh

phase5: validate ## üöÄ Validation finale Phase 5 (alias)
	@echo "$(GREEN)‚úÖ Phase 5 - Streaming Audio Avanc√© valid√©e!$(NC)"

webrtc-test: ## üåê Test fonctionnalit√©s WebRTC
	@echo "$(BLUE)üåê Test WebRTC - 1000 peers simultan√©s...$(NC)"
	@echo "$(YELLOW)Modules: Signaling, Adaptation bitrate, Multi-codecs$(NC)"
	@grep -r "max_peers.*1000" src/streaming/ || echo "$(RED)‚ùå Configuration 1000 peers manquante$(NC)"
	@grep -r "bitrate_adaptation" src/streaming/ && echo "$(GREEN)‚úÖ Adaptation bitrate activ√©e$(NC)" || echo "$(RED)‚ùå Adaptation manquante$(NC)"

sync-test: ## ‚è±Ô∏è Test synchronisation <100ms
	@echo "$(BLUE)‚è±Ô∏è Test synchronisation multi-clients...$(NC)"
	@echo "$(YELLOW)Objectif: Latence < 100ms pour 1000 listeners$(NC)"
	@grep -r "sync_tolerance_ms.*100" src/streaming/ && echo "$(GREEN)‚úÖ Tol√©rance <100ms configur√©e$(NC)" || echo "$(RED)‚ùå Tol√©rance manquante$(NC)"
	@grep -r "MasterClock" src/streaming/ && echo "$(GREEN)‚úÖ Horloge ma√Ætre d√©tect√©e$(NC)" || echo "$(RED)‚ùå Horloge manquante$(NC)"

recording-test: ## üé¨ Test recording temps r√©el
	@echo "$(BLUE)üé¨ Test recording temps r√©el multi-formats...$(NC)"
	@echo "$(YELLOW)Formats: MP3, FLAC, WAV + Transcodage + M√©tadonn√©es$(NC)"
	@grep -r "real_time_transcoding" src/streaming/ && echo "$(GREEN)‚úÖ Transcodage temps r√©el$(NC)" || echo "$(RED)‚ùå Transcodage manquant$(NC)"
	@grep -r "metadata_injection" src/streaming/ && echo "$(GREEN)‚úÖ Injection m√©tadonn√©es$(NC)" || echo "$(RED)‚ùå M√©tadonn√©es manquantes$(NC)"

analytics: ## üìä Affichage analytics temps r√©el Phase 5
	@echo "$(BLUE)üìä Analytics Streaming Audio Avanc√©...$(NC)"
	@echo "$(YELLOW)M√©triques: WebRTC, Sync, Recording, Sessions$(NC)"
	@echo ""
	@echo "$(GREEN)üìà MODULES PHASE 5:$(NC)"
	@if [ -f "src/streaming/webrtc.rs" ]; then \
		wc -l src/streaming/webrtc.rs | awk '{print "   üåê WebRTC: " $$1 " lignes"}'; \
	fi
	@if [ -f "src/streaming/sync_manager.rs" ]; then \
		wc -l src/streaming/sync_manager.rs | awk '{print "   ‚è±Ô∏è  Sync Manager: " $$1 " lignes"}'; \
	fi
	@if [ -f "src/streaming/live_recording.rs" ]; then \
		wc -l src/streaming/live_recording.rs | awk '{print "   üé¨ Live Recording: " $$1 " lignes"}'; \
	fi
	@if [ -f "src/streaming/advanced_streaming.rs" ]; then \
		wc -l src/streaming/advanced_streaming.rs | awk '{print "   üöÄ Advanced Engine: " $$1 " lignes"}'; \
	fi

metrics: ## üìà M√©triques binaire et optimisations Phase 5
	@echo "$(BLUE)üìà Analyse binaire et performances...$(NC)"
	@if [ -f "target/release/stream_server" ]; then \
		echo "$(GREEN)üì¶ Binaire Phase 5:$(NC)"; \
		ls -lah target/release/stream_server | awk '{print "   Taille: " $$5}'; \
		echo "$(GREEN)üîß Optimisations:$(NC)"; \
		echo "   ‚úÖ LTO activ√©"; \
		echo "   ‚úÖ Codegen units: 1"; \
		echo "   ‚úÖ Panic: abort"; \
		echo "   ‚úÖ Strip: true"; \
	else \
		echo "$(RED)‚ùå Binaire non trouv√© - ex√©cuter 'make build' d'abord$(NC)"; \
	fi

status: ## üìã √âtat d√©veloppement Phase 5
	@echo "$(BLUE)üìã √âtat Phase 5 - Streaming Audio Avanc√©$(NC)"
	@echo "$(BLUE)===========================================$(NC)"
	@echo ""
	@echo "$(GREEN)üéØ OBJECTIFS PHASE 5:$(NC)"
	@echo "   ‚úÖ Streaming adaptatif HLS/WebRTC"
	@echo "   ‚úÖ Support multi-bitrate (64, 128, 256, 320 kbps)"
	@echo "   ‚úÖ Synchronisation < 100ms"
	@echo "   ‚úÖ Recording temps r√©el"
	@echo "   ‚úÖ Support 1000 listeners simultan√©s"
	@echo ""
	@echo "$(GREEN)üìä MODULES IMPL√âMENT√âS:$(NC)"
	@ls -la src/streaming/*.rs 2>/dev/null | grep -E "(webrtc|sync_manager|live_recording|advanced_streaming)" | awk '{print "   ‚úÖ " $$9}' || echo "   ‚ö†Ô∏è  Modules Phase 5 en cours..."
	@echo ""
	@echo "$(YELLOW)üìà PROCHAINE √âTAPE: Phase 6 - Monitoring & Production$(NC)"

docker-build: ## Construit l'image Docker
	@echo "$(GREEN)üê≥ Construction de l'image Docker...$(NC)"
	docker build -t $(IMAGE_NAME):$(VERSION) -t $(IMAGE_NAME):latest .
	@echo "$(GREEN)‚úÖ Image Docker construite: $(IMAGE_NAME):$(VERSION)$(NC)"

docker-run: docker-build ## Lance le serveur dans Docker
	@echo "$(GREEN)üê≥ D√©marrage du conteneur Docker...$(NC)"
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p 8082:8082 \
		-v "$(PWD)/audio:/app/audio:ro" \
		-v "$(PWD)/.env:/app/.env:ro" \
		$(IMAGE_NAME):latest
	@echo "$(GREEN)‚úÖ Conteneur d√©marr√©: http://localhost:8082$(NC)"

docker-stop: ## Arr√™te et supprime le conteneur Docker
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t du conteneur...$(NC)"
	-docker stop $(CONTAINER_NAME) 2>/dev/null || true
	-docker rm $(CONTAINER_NAME) 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Conteneur arr√™t√©$(NC)"

docker-logs: ## Affiche les logs du conteneur
	@echo "$(GREEN)üìã Logs du conteneur:$(NC)"
	docker logs -f $(CONTAINER_NAME)

health-check: ## V√©rifie la sant√© du serveur
	@echo "$(GREEN)üè• V√©rification de la sant√© du serveur...$(NC)"
	@curl -s http://localhost:8082/health | jq . || echo "$(RED)‚ùå Serveur non accessible$(NC)"

install-deps: ## Installe les d√©pendances syst√®me n√©cessaires
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	@if command -v apt-get >/dev/null 2>&1; then \
		sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev; \
	elif command -v dnf >/dev/null 2>&1; then \
		sudo dnf install -y pkgconfig openssl-devel; \
	elif command -v pacman >/dev/null 2>&1; then \
		sudo pacman -S pkg-config openssl; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Gestionnaire de paquets non reconnu$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

setup: install-deps ## Configuration initiale du projet
	@echo "$(GREEN)üõ†Ô∏è  Configuration du projet...$(NC)"
	@if [ ! -f .env ]; then \
		cp env.example .env; \
		echo "$(GREEN)‚úÖ Fichier .env cr√©√©$(NC)"; \
	fi
	@mkdir -p audio logs recordings
	@echo "$(GREEN)‚úÖ R√©pertoires cr√©√©s (+ recordings pour Phase 5)$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  N'oubliez pas d'√©diter le fichier .env avec vos param√®tres$(NC)"

# T√¢che par d√©faut
all: fmt lint test build

.DEFAULT_GOAL := help 
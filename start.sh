#!/bin/bash

# Script de d√©marrage pour Veza - Application Web Unifi√©e avec Incus
# Ce script configure et d√©marre tous les services avec containers Incus

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'  
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Banner avec art ASCII
echo -e "${PURPLE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                              ‚ïë
‚ïë    ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïë
‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïë
‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïë
‚ïë    ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ïë
‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïë
‚ïë      ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïë
‚ïë                                                                              ‚ïë  
‚ïë                    üöÄ Application Web Unifi√©e - Incus                       ‚ïë
‚ïë                          8 Containers Microservices                         ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Fonction d'aide
show_help() {
    echo -e "${BLUE}Utilisation : $0 [OPTION]${NC}"
    echo ""
    echo -e "${CYAN}Options disponibles :${NC}"
    echo -e "  ${GREEN}setup${NC}      - Configuration initiale du projet et Incus"
    echo -e "  ${GREEN}dev${NC}        - D√©marrage complet avec Incus (8 containers)"  
    echo -e "  ${GREEN}dev-local${NC}  - D√©marrage en mode d√©veloppement local (sans containers)"
    echo -e "  ${GREEN}build${NC}      - Construction de tous les services"
    echo -e "  ${GREEN}test${NC}       - Ex√©cution de tous les tests"
    echo -e "  ${GREEN}clean${NC}      - Nettoyage des fichiers temporaires"
    echo -e "  ${GREEN}status${NC}     - V√©rification du statut des containers"
    echo -e "  ${GREEN}stop${NC}       - Arr√™t de tous les containers Incus"
    echo -e "  ${GREEN}logs${NC}       - Voir les logs de tous les containers"
    echo -e "  ${GREEN}help${NC}       - Afficher cette aide"
    echo ""
    echo -e "${YELLOW}Exemples :${NC}"
    echo -e "  $0 setup       # Configuration initiale"
    echo -e "  $0 dev         # D√©marrage Incus (recommand√©)"
    echo -e "  $0 dev-local   # D√©marrage local sans containers"
    echo -e "  $0 status      # V√©rifier le statut"
    echo ""
    echo -e "${CYAN}üêß Architecture Incus - 8 Containers :${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}veza-postgres${NC}  - Base de donn√©es PostgreSQL (10.100.0.15)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-redis${NC}     - Cache Redis (10.100.0.17)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-storage${NC}   - Stockage ZFS + NFS (10.100.0.18)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-backend${NC}   - API Backend Go (10.100.0.12)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-chat${NC}      - Serveur Chat Rust (10.100.0.13)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-stream${NC}    - Serveur Stream Rust (10.100.0.14)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-frontend${NC}  - Interface React (10.100.0.11)"
    echo -e "  ‚Ä¢ ${YELLOW}veza-haproxy${NC}   - Load Balancer HAProxy (10.100.0.16)"
    echo ""
    echo -e "${CYAN}üíæ Gestion ZFS Storage :${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}make zfs-status${NC}    - Statut du pool ZFS"
    echo -e "  ‚Ä¢ ${YELLOW}make zfs-snapshot${NC}  - Cr√©er des snapshots"
    echo -e "  ‚Ä¢ ${YELLOW}make zfs-monitor${NC}   - Monitoring en temps r√©el"
    echo -e "  ‚Ä¢ ${YELLOW}make zfs-compress${NC}  - Stats compression"
    echo ""
}

# Fonction de v√©rification des pr√©requis
check_requirements() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    local missing_requirements=()
    
    # V√©rifier Incus (obligatoire)
    if ! command -v incus &> /dev/null; then
        missing_requirements+=("Incus")
    fi
    
    # V√©rifier Make
    if ! command -v make &> /dev/null; then
        missing_requirements+=("Make")
    fi
    
    # V√©rifier Node.js (pour d√©veloppement local)
    if ! command -v node &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Node.js non trouv√© (n√©cessaire pour d√©veloppement local)${NC}"
    fi
    
    # V√©rifier Go (pour d√©veloppement local)
    if ! command -v go &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Go non trouv√© (n√©cessaire pour d√©veloppement local)${NC}"
    fi
    
    # V√©rifier Rust (pour d√©veloppement local)
    if ! command -v cargo &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Rust/Cargo non trouv√© (n√©cessaire pour d√©veloppement local)${NC}"
    fi
    
    if [ ${#missing_requirements[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Pr√©requis manquants :${NC}"
        for req in "${missing_requirements[@]}"; do
            echo -e "  ‚Ä¢ $req"
        done
        echo ""
        echo -e "${BLUE}üìã Instructions d'installation :${NC}"
        echo -e "${CYAN}Incus :${NC} sudo snap install incus --channel=latest/stable"
        echo -e "${CYAN}       ${NC} sudo incus admin init"
        echo -e "${CYAN}Make :${NC} sudo apt install make (Ubuntu/Debian)"
        echo -e "${CYAN}Node.js :${NC} https://nodejs.org/"
        echo -e "${CYAN}Go :${NC} https://golang.org/dl/"
        echo -e "${CYAN}Rust :${NC} https://rustup.rs/"
        echo ""
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis principaux install√©s${NC}"
}

# Fonction de configuration
setup_project() {
    echo -e "${BLUE}üîß Configuration du projet Veza avec Incus...${NC}"
    
    # V√©rifier les pr√©requis
    check_requirements
    
    # Utiliser le Makefile pour la configuration
    make setup
    make incus-setup
    
    echo -e "${GREEN}‚úÖ Configuration termin√©e !${NC}"
    echo ""
    echo -e "${BLUE}üìã Prochaines √©tapes :${NC}"
    echo -e "  1. Modifier le fichier ${YELLOW}.env${NC} selon vos besoins"
    echo -e "  2. Lancer ${YELLOW}$0 dev${NC} pour d√©marrer avec Incus"
    echo -e "  3. Acc√©der √† ${YELLOW}http://10.100.0.16${NC} pour l'application"
}

# Fonction de d√©marrage d√©veloppement Incus
start_dev() {
    echo -e "${BLUE}üöÄ D√©marrage en mode d√©veloppement avec Incus...${NC}"
    echo -e "${YELLOW}Les services seront accessibles sur :${NC}"
    echo -e "  ‚Ä¢ Application HAProxy : ${GREEN}http://10.100.0.16${NC}"
    echo -e "  ‚Ä¢ HAProxy Stats       : ${GREEN}http://10.100.0.16:8404/stats${NC}"
    echo -e "  ‚Ä¢ Frontend React      : ${GREEN}http://10.100.0.11:5173${NC}"
    echo -e "  ‚Ä¢ Backend API         : ${GREEN}http://10.100.0.12:8080${NC}"
    echo -e "  ‚Ä¢ Chat WebSocket      : ${GREEN}ws://10.100.0.13:8081/ws${NC}"
    echo -e "  ‚Ä¢ Stream WebSocket    : ${GREEN}ws://10.100.0.14:8082/ws${NC}"
    echo ""
    
    # Utiliser le Makefile pour d√©marrer avec Incus
    make incus-dev
}

# Fonction de d√©marrage d√©veloppement local
start_dev_local() {
    echo -e "${BLUE}üöÄ D√©marrage en mode d√©veloppement local...${NC}"
    echo -e "${YELLOW}Les services seront accessibles sur :${NC}"
    echo -e "  ‚Ä¢ Frontend React  : ${GREEN}http://localhost:5173${NC}"
    echo -e "  ‚Ä¢ Backend API     : ${GREEN}http://localhost:8080${NC}"
    echo -e "  ‚Ä¢ Chat WebSocket  : ${GREEN}ws://localhost:8081/ws${NC}"
    echo -e "  ‚Ä¢ Stream WebSocket: ${GREEN}ws://localhost:8082/ws${NC}"
    echo ""
    echo -e "${CYAN}üí° Appuyez sur Ctrl+C pour arr√™ter tous les services${NC}"
    echo ""
    
    # Utiliser le Makefile pour d√©marrer en mode d√©veloppement local
    make dev-local
}

# Fonction de build
build_all() {
    echo -e "${BLUE}üî® Construction de tous les services...${NC}"
    make build
}

# Fonction de test
test_all() {
    echo -e "${BLUE}üß™ Ex√©cution de tous les tests...${NC}"
    make test
}

# Fonction de nettoyage
clean_all() {
    echo -e "${BLUE}üßπ Nettoyage des fichiers temporaires...${NC}"
    make clean
}

# Fonction de v√©rification de statut
status_check() {
    echo -e "${BLUE}üìä V√©rification du statut des containers...${NC}"
    make status
}

# Fonction d'arr√™t
stop_all() {
    echo -e "${BLUE}üõë Arr√™t de tous les containers Incus...${NC}"
    make incus-stop
}

# Fonction de logs
logs_all() {
    echo -e "${BLUE}üìù Logs de tous les containers...${NC}"
    make logs
}

# Script principal
main() {
    # V√©rifier les arguments
    case "${1:-help}" in
        "setup")
            setup_project
            ;;
        "dev")
            check_requirements
            start_dev
            ;;
        "dev-local")
            check_requirements
            start_dev_local
            ;;
        "build")
            check_requirements
            build_all
            ;;
        "test")
            check_requirements
            test_all
            ;;
        "clean")
            clean_all
            ;;
        "status")
            check_requirements
            status_check
            ;;
        "stop")
            check_requirements
            stop_all
            ;;
        "logs")
            check_requirements
            logs_all
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Ex√©cuter le script principal
main "$@"
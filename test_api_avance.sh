#!/bin/bash

# Script de test API Talas/Veza - Version avanc√©e
# Tests complets avec cas d'erreur et rapport d√©taill√©

# Configuration
API="http://localhost:8080/api/v1"
TMP="/tmp/veza_test_advanced"
REPORT="$TMP/rapport_complet.md"
mkdir -p "$TMP"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
TOKEN=""
ADMIN_TOKEN=""
USER_ID=""
USER2_ID=""
ROOM_ID=""
LISTING_ID=""
TRACK_ID=""
TOTAL=0
PASS=0
FAIL=0
WARN=0

# Initialisation du rapport
cat > "$REPORT" << 'EOF'
# üìä Rapport de Tests API Talas/Veza

**Date des tests:** $(date)
**Version API:** 1.0.0
**URL de base:** http://localhost:8080/api/v1

## üéØ Objectifs des tests
- Valider toutes les fonctionnalit√©s CRUD
- Tester la s√©curit√© et l'authentification
- V√©rifier les performances basiques
- Identifier les points d'am√©lioration

## üìã R√©sultats d√©taill√©s

EOF

# Fonctions utilitaires
log() { 
    echo -e "${BLUE}[TEST]${NC} $1"
    ((TOTAL++))
    echo "### Test: $1" >> "$REPORT"
}

ok() { 
    echo -e "${GREEN}‚úÖ $1${NC}"
    ((PASS++))
    echo "**‚úÖ SUCC√àS:** $1" >> "$REPORT"
    echo "" >> "$REPORT"
}

err() { 
    echo -e "${RED}‚ùå $1${NC}"
    ((FAIL++))
    echo "**‚ùå √âCHEC:** $1" >> "$REPORT"
    echo "" >> "$REPORT"
}

warn() { 
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARN++))
    echo "**‚ö†Ô∏è ATTENTION:** $1" >> "$REPORT"
    echo "" >> "$REPORT"
}

info() { 
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
    echo "**‚ÑπÔ∏è INFO:** $1" >> "$REPORT"
    echo "" >> "$REPORT"
}

# Fonction de requ√™te am√©lior√©e
req() {
    local method="$1" url="$2" data="$3" auth="$4" expected_status="$5"
    local cmd="curl -s -w '%{http_code}'"
    
    [ -n "$auth" ] && cmd="$cmd -H 'Authorization: Bearer $TOKEN'"
    [ -n "$data" ] && cmd="$cmd -H 'Content-Type: application/json' -d '$data'"
    [ "$method" != "GET" ] && cmd="$cmd -X $method"
    
    cmd="$cmd -o $TMP/resp.json '$url'"
    local status=$(eval $cmd 2>>"$TMP/debug.log")
    local response=$(cat "$TMP/resp.json" 2>/dev/null || echo "{}")
    
    echo "$response" > "$TMP/last.json"
    echo "$status" > "$TMP/status.txt"
    
    echo "**Requ√™te:** \`$method $url\`" >> "$REPORT"
    echo "**Status:** $status" >> "$REPORT"
    echo "**R√©ponse:** \`$(echo "$response" | head -c 100)...\`" >> "$REPORT"
    
    if [ -n "$expected_status" ]; then
        [ "$status" = "$expected_status" ]
    else
        [ "$status" = "200" ] || [ "$status" = "201" ]
    fi
}

# Tests avec cas d'erreur
test_auth_errors() {
    echo -e "\n${BLUE}=== TESTS D'ERREURS D'AUTHENTIFICATION ===${NC}"
    
    log "Inscription avec email invalide"
    if req "POST" "$API/auth/signup" '{"username":"test","email":"invalid-email","password":"test"}' "" "400"; then
        ok "Email invalide rejet√© correctement"
    else
        warn "Validation email insuffisante"
    fi
    
    log "Inscription avec mot de passe trop court"
    if req "POST" "$API/auth/signup" '{"username":"test","email":"test@test.com","password":"123"}' "" "400"; then
        ok "Mot de passe court rejet√©"
    else
        warn "Validation mot de passe insuffisante"
    fi
    
    log "Connexion avec identifiants incorrects"
    if req "POST" "$API/auth/login" '{"email":"wrong@test.com","password":"wrongpass"}' "" "401"; then
        ok "Identifiants incorrects rejet√©s"
    else
        warn "Authentification faible"
    fi
}

# Tests d'autorisation
test_permissions() {
    echo -e "\n${BLUE}=== TESTS DE PERMISSIONS ===${NC}"
    
    log "Acc√®s route admin sans droits"
    if req "GET" "$API/admin/dashboard" "" "auth" "403"; then
        ok "Acc√®s admin correctement refus√©"
    else
        warn "Contr√¥le d'acc√®s admin insuffisant"
    fi
    
    log "Modification profil autre utilisateur"
    if req "PUT" "$API/users/1" '{"username":"hacked"}' "auth" "403"; then
        ok "Modification autre utilisateur refus√©e"
    else
        warn "Isolation utilisateurs insuffisante"
    fi
}

# Tests de validation des donn√©es
test_data_validation() {
    echo -e "\n${BLUE}=== TESTS DE VALIDATION DES DONN√âES ===${NC}"
    
    log "Cr√©ation track sans titre"
    if req "POST" "$API/tracks" '{"description":"test"}' "auth" "400"; then
        ok "Track sans titre rejet√©"
    else
        warn "Validation track insuffisante"
    fi
    
    log "Cr√©ation listing avec prix n√©gatif"
    if req "POST" "$API/listings" '{"title":"test","price":-10}' "auth" "400"; then
        ok "Prix n√©gatif rejet√©"
    else
        warn "Validation prix insuffisante"
    fi
    
    log "Cr√©ation salon avec nom vide"
    if req "POST" "$API/rooms" '{"name":"","description":"test"}' "auth" "400"; then
        ok "Nom salon vide rejet√©"
    else
        warn "Validation salon insuffisante"
    fi
}

# Tests d'injection
test_security_injections() {
    echo -e "\n${BLUE}=== TESTS DE S√âCURIT√â (INJECTIONS) ===${NC}"
    
    log "Injection SQL dans recherche"
    if req "GET" "$API/search?q=' OR 1=1--" "" ""; then
        local response=$(cat "$TMP/last.json")
        if echo "$response" | grep -qi "error\|sql\|syntax"; then
            ok "Injection SQL d√©tect√©e et bloqu√©e"
        else
            warn "Possible vuln√©rabilit√© injection SQL"
        fi
    else
        ok "Requ√™te malicieuse rejet√©e"
    fi
    
    log "Injection XSS dans cr√©ation track"
    if req "POST" "$API/tracks" '{"title":"<script>alert(1)</script>","description":"test"}' "auth" ""; then
        local response=$(cat "$TMP/last.json")
        if echo "$response" | grep -q "<script>"; then
            warn "Possible vuln√©rabilit√© XSS"
        else
            ok "Contenu XSS √©chapp√©/filtr√©"
        fi
    else
        ok "Contenu malicieux rejet√©"
    fi
}

# Tests de charge avanc√©s
test_advanced_performance() {
    echo -e "\n${BLUE}=== TESTS DE PERFORMANCE AVANC√âS ===${NC}"
    
    log "Test de charge - 20 requ√™tes simultan√©es"
    local start=$(date +%s%N)
    for i in {1..20}; do
        req "GET" "$API/tags" &
    done
    wait
    local end=$(date +%s%N)
    local duration=$(( (end - start) / 1000000 ))
    
    if [ $duration -lt 2000 ]; then
        ok "Performance excellente: 20 requ√™tes en ${duration}ms"
    elif [ $duration -lt 5000 ]; then
        warn "Performance correcte: 20 requ√™tes en ${duration}ms"
    else
        err "Performance d√©grad√©e: 20 requ√™tes en ${duration}ms"
    fi
    
    log "Test rate limiting"
    local rate_limit_hit=0
    for i in {1..25}; do
        req "GET" "$API/tags"
        local status=$(cat "$TMP/status.txt")
        if [ "$status" = "429" ]; then
            rate_limit_hit=1
            break
        fi
        sleep 0.1
    done
    
    if [ $rate_limit_hit -eq 1 ]; then
        ok "Rate limiting actif et efficace"
    else
        warn "Rate limiting non d√©tect√© ou tr√®s permissif"
    fi
}

# Tests des flux complets
test_complete_workflows() {
    echo -e "\n${BLUE}=== TESTS DE FLUX COMPLETS ===${NC}"
    
    log "Flux complet: Cr√©ation utilisateur ‚Üí Track ‚Üí Salon ‚Üí Message"
    
    # Cr√©ation deuxi√®me utilisateur
    local ts2=$(date +%s)_2
    local email2="test_$ts2@test.com"
    local user2="user_$ts2"
    
    if req "POST" "$API/auth/signup" "{\"username\":\"$user2\",\"email\":\"$email2\",\"password\":\"password123\"}"; then
        info "Utilisateur 2 cr√©√©"
        
        if req "POST" "$API/auth/login" "{\"email\":\"$email2\",\"password\":\"password123\"}"; then
            local token2=$(cat "$TMP/last.json" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
            info "Utilisateur 2 connect√©"
            
            # Cr√©er un track avec le premier utilisateur
            if req "POST" "$API/tracks" '{"title":"Track Collaboratif","description":"Pour tests"}' "auth"; then
                info "Track cr√©√© par utilisateur 1"
                
                # Cr√©er un salon
                if req "POST" "$API/rooms" '{"name":"Salon Test","description":"Pour discussions","is_public":true}' "auth"; then
                    local room_id=$(cat "$TMP/last.json" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
                    info "Salon cr√©√© (ID: $room_id)"
                    
                    # Test conversation
                    local saved_token="$TOKEN"
                    TOKEN="$token2"
                    if req "GET" "$API/chat/rooms" "" "auth"; then
                        ok "Flux complet r√©ussi: utilisateurs, tracks, salons fonctionnent ensemble"
                    else
                        warn "Flux partiellement fonctionnel"
                    fi
                    TOKEN="$saved_token"
                else
                    warn "√âchec cr√©ation salon dans le flux"
                fi
            else
                warn "√âchec cr√©ation track dans le flux"
            fi
        else
            warn "√âchec connexion utilisateur 2"
        fi
    else
        warn "√âchec cr√©ation utilisateur 2"
    fi
}

# Tests de coh√©rence des donn√©es
test_data_consistency() {
    echo -e "\n${BLUE}=== TESTS DE COH√âRENCE DES DONN√âES ===${NC}"
    
    log "V√©rification coh√©rence utilisateur apr√®s modifications"
    local initial_count=$(req "GET" "$API/users" && cat "$TMP/last.json" | grep -o '"id"' | wc -l)
    
    # Modifier le profil
    if req "PUT" "$API/users/me" '{"first_name":"Test","last_name":"User"}' "auth"; then
        # V√©rifier que les infos sont bien mises √† jour
        if req "GET" "$API/users/me" "" "auth"; then
            local response=$(cat "$TMP/last.json")
            if echo "$response" | grep -q "Test" && echo "$response" | grep -q "User"; then
                ok "Coh√©rence donn√©es utilisateur maintenue"
            else
                warn "Incoh√©rence dans les donn√©es utilisateur"
            fi
        fi
    fi
    
    log "V√©rification unicit√© des emails"
    local ts_dup=$(date +%s)_dup
    if req "POST" "$API/auth/signup" "{\"username\":\"duplicate_$ts_dup\",\"email\":\"$EMAIL\",\"password\":\"password123\"}" "" "400"; then
        ok "Unicit√© email respect√©e"
    else
        err "Violation contrainte unicit√© email"
    fi
}

# === EX√âCUTION PRINCIPALE ===
echo -e "${PURPLE}üöÄ TESTS API TALAS/VEZA - SUITE AVANC√âE${NC}\n"

# Tests basiques d'abord
./test_api_simple.sh > /dev/null 2>&1
if [ $? -eq 0 ]; then
    info "Tests basiques pass√©s - D√©marrage tests avanc√©s"
    
    # R√©cup√©ration du token depuis les tests basiques
    if [ -f "/tmp/veza_test/last.json" ]; then
        TOKEN=$(grep -o '"access_token":"[^"]*"' /tmp/veza_test/last.json | cut -d'"' -f4 2>/dev/null || echo "")
    fi
    
    # Si pas de token, on refait une auth rapide
    if [ -z "$TOKEN" ]; then
        TS=$(date +%s)
        EMAIL="test_advanced_$TS@test.com"
        req "POST" "$API/auth/signup" "{\"username\":\"user_advanced_$TS\",\"email\":\"$EMAIL\",\"password\":\"password123\"}"
        req "POST" "$API/auth/login" "{\"email\":\"$EMAIL\",\"password\":\"password123\"}"
        TOKEN=$(cat "$TMP/last.json" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    fi
    
    # Tests avanc√©s
    test_auth_errors
    test_permissions
    test_data_validation
    test_security_injections
    test_advanced_performance
    test_complete_workflows
    test_data_consistency
    
else
    err "Tests basiques √©chou√©s - Arr√™t des tests avanc√©s"
    exit 1
fi

# === G√âN√âRATION DU RAPPORT FINAL ===
cat >> "$REPORT" << EOF

## üìä Statistiques finales

| M√©trique | Valeur |
|----------|--------|
| **Total des tests** | $TOTAL |
| **Tests r√©ussis** | $PASS |
| **Tests √©chou√©s** | $FAIL |
| **Avertissements** | $WARN |
| **Taux de r√©ussite** | $(( PASS * 100 / TOTAL ))% |

## üèÜ √âvaluation globale

EOF

if [ $FAIL -eq 0 ]; then
    cat >> "$REPORT" << 'EOF'
### ‚úÖ EXCELLENTE QUALIT√â
L'API Talas est **robuste et pr√™te pour la production**. Tous les tests critiques passent.

#### Points forts identifi√©s:
- Authentification JWT s√©curis√©e
- Validation des donn√©es correcte
- Performances satisfaisantes
- Architecture solide

EOF
    echo -e "\n${GREEN}üéâ TESTS AVANC√âS R√âUSSIS !${NC}"
    echo -e "${GREEN}L'API Talas est de haute qualit√© et pr√™te pour la production${NC}"
elif [ $FAIL -le 2 ]; then
    cat >> "$REPORT" << 'EOF'
### ‚ö†Ô∏è BONNE QUALIT√â AVEC AM√âLIORATIONS
L'API est **fonctionnelle** mais quelques am√©liorations sont recommand√©es.

EOF
    echo -e "\n${YELLOW}‚ö†Ô∏è  Tests majoritairement r√©ussis avec quelques points d'am√©lioration${NC}"
else
    cat >> "$REPORT" << 'EOF'
### ‚ùå QUALIT√â √Ä AM√âLIORER
Plusieurs points critiques n√©cessitent une attention imm√©diate.

EOF
    echo -e "\n${RED}‚ùå Plusieurs probl√®mes d√©tect√©s - R√©vision n√©cessaire${NC}"
fi

cat >> "$REPORT" << EOF

## üîß Recommandations

1. **S√©curit√©**: Continuer les tests de p√©n√©tration
2. **Performance**: Monitorer en production avec des m√©triques
3. **Documentation**: Mettre √† jour la documentation API
4. **Tests**: Int√©grer ces tests dans la CI/CD

## üìÖ Prochaines √©tapes

- [ ] D√©ployment en environnement de staging
- [ ] Tests d'int√©gration avec le frontend React
- [ ] Tests de charge avec plus d'utilisateurs simultan√©s
- [ ] Validation de la sauvegarde/restauration des donn√©es

---
*Rapport g√©n√©r√© automatiquement le $(date)*
EOF

echo -e "\n${CYAN}üìä Statistiques compl√®tes:${NC}"
echo -e "   Total: ${BLUE}$TOTAL${NC} | R√©ussis: ${GREEN}$PASS${NC} | √âchecs: ${RED}$FAIL${NC} | Warnings: ${YELLOW}$WARN${NC}"
echo -e "\n${PURPLE}üìÑ Rapport complet g√©n√©r√©: $REPORT${NC}"
echo -e "${PURPLE}üîç Logs de debug: $TMP/debug.log${NC}"

# Ouvrir le rapport si possible
if command -v firefox >/dev/null 2>&1; then
    echo -e "${CYAN}üåê Ouverture du rapport dans Firefox...${NC}"
    firefox "$REPORT" 2>/dev/null &
fi 